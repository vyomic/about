[
    {
        "QuestionNumber": 1,
        "Question": "Which utility allows you to automatically restart a Node application when changes are detected?",
        "Options": {
            "A": "NodeLive",
            "B": "NodeReload",
            "C": "Nodemon",
            "D": "AutoNode"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 2,
        "Question": "How do you define a service in Angular?",
        "Options": {
            "A": "By using the @Injectable decorator and defining a class",
            "B": "By extending the Service class",
            "C": "By creating a component with a service flag",
            "D": "By using a factory function"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 3,
        "Question": "A record in MongoDB is equivalent to:",
        "Options": {
            "A": "Document",
            "B": "Table",
            "C": "Application",
            "D": "None of the mentioned above"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 4,
        "Question": "What is Node.js?",
        "Options": {
            "A": "A JavaScript runtime built on Chrome's V8 JavaScript engine",
            "B": "A back-end framework",
            "C": "A front-end framework",
            "D": "A type of database"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 5,
        "Question": "Which package manager is bundled with Node.js by default?",
        "Options": {
            "A": "npm",
            "B": "bower",
            "C": "yarn",
            "D": "grunt"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 6,
        "Question": "How can you initiate a project using npm?",
        "Options": {
            "A": "npm start",
            "B": "npm init",
            "C": "npm run",
            "D": "npm create"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 7,
        "Question": "Which method is used in Node.js to include modules?",
        "Options": {
            "A": "require()",
            "B": "include()",
            "C": "import",
            "D": "fetch()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 8,
        "Question": "Which core module in Node.js provides asynchronous file operations?",
        "Options": {
            "A": "http",
            "B": "url",
            "C": "fs",
            "D": "path"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 9,
        "Question": "In Node.js, which is an in-built event emitter?",
        "Options": {
            "A": "EventEmitter",
            "B": "EventsNew",
            "C": "EventLoop",
            "D": "EventYield"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 10,
        "Question": "Which global object provides functionality to control the Node.js runtime process?",
        "Options": {
            "A": "Global",
            "B": "Runtime",
            "C": "Process",
            "D": "NodeControl"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 11,
        "Question": "To create a new instance of a server in Node.js, we use?",
        "Options": {
            "A": "http.createServer()",
            "B": "http.createInstance()",
            "C": "http.newServer()",
            "D": "http.createServerInstance()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 12,
        "Question": "The core module for handling paths?",
        "Options": {
            "A": "url",
            "B": "dir",
            "C": "path",
            "D": "location"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 13,
        "Question": "Stream module in Node.js provides;",
        "Options": {
            "A": "Tools for creating WebSockets",
            "B": "Utilities for handling HTTP operations",
            "C": "A way to handle streaming data",
            "D": "Functions for dealing with promises"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 14,
        "Question": "Which is not a core module in Node.js?",
        "Options": {
            "A": "fs",
            "B": "http",
            "C": "express",
            "D": "url"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 15,
        "Question": "Which object stores all the environment variables in a Node.js application?",
        "Options": {
            "A": "env",
            "B": "process.env",
            "C": "node.env",
            "D": "app.env"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 16,
        "Question": "The data model available within MongoDB allows us to represent ___.",
        "Options": {
            "A": "Hierarchical relationships",
            "B": "Able to handle complex structures",
            "C": "Both A and B",
            "D": "None of the mentioned above"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 17,
        "Question": "How do you install a package locally using npm in a Node.js application?",
        "Options": {
            "A": "npm install -l <package-name>",
            "B": "npm local install <package-name>",
            "C": "npm run install <package-name>",
            "D": "npm install <package-name>"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 18,
        "Question": "What stands true for MongoDB?",
        "Options": {
            "A": "MongoDB is a cross-platform database",
            "B": "Document oriented database",
            "C": "High performance database",
            "D": "All of the mentioned above"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 19,
        "Question": "What does the npm init command do?",
        "Options": {
            "A": "Installs the dependencies listed in package.json",
            "B": "Starts the Node.js application",
            "C": "It creates a new Node.js application",
            "D": "It initializes a new package.json file"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 20,
        "Question": "Which of the following is used to import modules in Node.js?",
        "Options": {
            "A": "import { module } from 'module-name'",
            "B": "#include 'module-name'",
            "C": "require('module-name')",
            "D": "using module-name"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 21,
        "Question": "The npm command used to install the dependencies listed in package.json file is?",
        "Options": {
            "A": "npm init",
            "B": "npm run",
            "C": "npm start",
            "D": "npm install"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 22,
        "Question": "Which of these methods will handle HTTP POST requests in an Express app?",
        "Options": {
            "A": "app.post()",
            "B": "app.get()",
            "C": "app.all()",
            "D": "app.put()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 23,
        "Question": "Which Node.js command is used to execute a JavaScript file, say 'app.js'?",
        "Options": {
            "A": "node install app.js",
            "B": "node run app.js",
            "C": "node app.js",
            "D": "npm app.js"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 24,
        "Question": "What is the purpose of the --save flag in the npm install command?",
        "Options": {
            "A": "To globally install a package",
            "B": "To save a backup of the current project",
            "C": "To save the package version in the package-lock.json",
            "D": "To save the package in the package.json dependencies"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 25,
        "Question": "Which npm command can be used to list all globally installed packages?",
        "Options": {
            "A": "npm list -g",
            "B": "npm global list",
            "C": "npm show",
            "D": "npm modules"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 26,
        "Question": "Which of the following best describes MongoDB?",
        "Options": {
            "A": "Relational database",
            "B": "Spreadsheet program",
            "C": "Document-based NoSQL database",
            "D": "Graph database"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 27,
        "Question": "In MongoDB, a record is equivalent to a:",
        "Options": {
            "A": "Row",
            "B": "Table",
            "C": "Document",
            "D": "Database"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 28,
        "Question": "The default port for MongoDB is:",
        "Options": {
            "A": "27017",
            "B": "8080",
            "C": "3306",
            "D": "3000"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 29,
        "Question": "Which MongoDB command is used to display the database you are currently using?",
        "Options": {
            "A": "show currentDatabase",
            "B": "show db",
            "C": "use db",
            "D": "db"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 30,
        "Question": "To create or switch to a database in MongoDB, which command would you use?",
        "Options": {
            "A": "db.<database_name>",
            "B": "createDatabase(name)",
            "C": "switchDatabase(name)",
            "D": "use <database_name>"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 31,
        "Question": "Which of the following commands will show you all the collections in your current database, in the mongo shell?",
        "Options": {
            "A": "show collections",
            "B": "list collections",
            "C": "display collections",
            "D": "db.collections()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 32,
        "Question": "Which of the following commands will show you all the collections in your current database, in node applications?",
        "Options": {
            "A": "show collections",
            "B": "list collections",
            "C": "db.listCollections()",
            "D": "db.collections()"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 33,
        "Question": "Which of the following commands deletes a MongoDB database?",
        "Options": {
            "A": "removeDatabase()",
            "B": "destroyDatabase()",
            "C": "db.dropDatabase()",
            "D": "deleteDatabase()"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 34,
        "Question": "Which MongoDB method can be used to remove one or more documents from a collection?",
        "Options": {
            "A": "db.<collection_name>.drop()",
            "B": "db.<collection_name>.remove()",
            "C": "db.<collection_name>.delete()",
            "D": "db.<collection_name>.discard()"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 35,
        "Question": "What is the BSON in MongoDB?",
        "Options": {
            "A": "A database engine",
            "B": "A query language",
            "C": "A backup tool",
            "D": "Binary representation of JSON"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 36,
        "Question": "REST stands for;",
        "Options": {
            "A": "Representational State Transform",
            "B": "Representational State Transfer",
            "C": "Represent State Transform",
            "D": "Represent State Transfer"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 37,
        "Question": "What is the protocol used in REST?",
        "Options": {
            "A": "FTP",
            "B": "HTTP",
            "C": "JMX",
            "D": "SOAP"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 38,
        "Question": "What is the HTTP Code Related to Internal Server Error?",
        "Options": {
            "A": "500",
            "B": "501",
            "C": "504",
            "D": "502"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 39,
        "Question": "What does HTTP Code 200 indicate?",
        "Options": {
            "A": "Error",
            "B": "Completed",
            "C": "Success",
            "D": "Warning"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 40,
        "Question": "The HTTP method used to make an HTTP request to create new resource?",
        "Options": {
            "A": "POST",
            "B": "PUT",
            "C": "GET",
            "D": "CREATE"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 41,
        "Question": "Which HTTP method do we use to make an HTTP request to update existing resource?",
        "Options": {
            "A": "POST",
            "B": "PUT",
            "C": "UPDATE",
            "D": "DELETE"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 42,
        "Question": "What does the HTTP status code 201 indicate?",
        "Options": {
            "A": "OK",
            "B": "Created",
            "C": "Accepted",
            "D": "No Content"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 43,
        "Question": "Which MongoDB command returns statistics about the database?",
        "Options": {
            "A": "db.stats()",
            "B": "db.info()",
            "C": "db.data()",
            "D": "db.details()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 44,
        "Question": "What format does MongoDB use for its queries?",
        "Options": {
            "A": "SQL",
            "B": "XML",
            "C": "BSON",
            "D": "XQuery"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 45,
        "Question": "To update a document in a collection, which method is appropriate?",
        "Options": {
            "A": "db.<collection_name>.modify()",
            "B": "db.<collection_name>.edit()",
            "C": "db.<collection_name>.revise()",
            "D": "db.<collection_name>.update()"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 46,
        "Question": "Which of the following operations provides a sorted list of the documents in a collection?",
        "Options": {
            "A": "db.<collection_name>.sort()",
            "B": "db.<collection_name>.arrange()",
            "C": "db.<collection_name>.listSorted()",
            "D": "db.<collection_name>.orderBy()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 47,
        "Question": "How can you backup your MongoDB database?",
        "Options": {
            "A": "mongodump",
            "B": "mongobackup",
            "C": "mongosave",
            "D": "mongoarchive"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 48,
        "Question": "Which tool can be used to import content from a BSON file into a MongoDB database?",
        "Options": {
            "A": "mongoimport",
            "B": "mongorestore",
            "C": "mongoload",
            "D": "mongofetch"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 49,
        "Question": "Which of the following commands lists all available MongoDB databases?",
        "Options": {
            "A": "show dbs",
            "B": "list dbs",
            "C": "show databases",
            "D": "db.list()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 50,
        "Question": "Which MongoDB function is used to limit the number of results returned?",
        "Options": {
            "A": "db.<collection_name>.count()",
            "B": "db.<collection_name>.skip()",
            "C": "db.<collection_name>.limit()",
            "D": "db.<collection_name>.restrict()"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 51,
        "Question": "In which language is MongoDB written?",
        "Options": {
            "A": "Python",
            "B": "Java",
            "C": "C++",
            "D": "Go"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 52,
        "Question": "If you wish to retrieve only the specified fields of a document, which method would you use?",
        "Options": {
            "A": "project()",
            "B": "show()",
            "C": "select()",
            "D": "find()"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 53,
        "Question": "Which method sends a JSON response in Express.js?",
        "Options": {
            "A": "res.json()",
            "B": "res.send()",
            "C": "res.sendFile()",
            "D": "res.render()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 54,
        "Question": "If you want to join collections in MongoDB, which operator would you use?",
        "Options": {
            "A": "$join",
            "B": "$link",
            "C": "$lookup",
            "D": "$merge"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 55,
        "Question": "What type of index in MongoDB allows you to search text fields?",
        "Options": {
            "A": "Text index",
            "B": "Compound index",
            "C": "Unique index",
            "D": "Sparse index"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 56,
        "Question": "Which MongoDB command provides execution statistics about query performance?",
        "Options": {
            "A": "db.<collection_name>.stats()",
            "B": "db.<collection_name>.explain()",
            "C": "db.<collection_name>.details()",
            "D": "db.<collection_name>.analyze()"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 57,
        "Question": "How do you create a unique index on a field in MongoDB?",
        "Options": {
            "A": "{ uniqueKey: 1 }",
            "B": "{ index: 'unique' }",
            "C": "{ type: 'unique' }",
            "D": "{ unique: true }"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 58,
        "Question": "In Express.js, how do you redirect a user to another page?",
        "Options": {
            "A": "res.send('/new-url')",
            "B": "res.redirect('/new-url')",
            "C": "res.goto('/new-url')",
            "D": "app.redirect('/new-url')"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 59,
        "Question": "Which command is used to terminate a long-running operation in MongoDB?",
        "Options": {
            "A": "db.killOp()",
            "B": "db.stopOp()",
            "C": "db.terminate()",
            "D": "db.endOp()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 60,
        "Question": "What is Express.js?",
        "Options": {
            "A": "A database",
            "B": "A frontend framework",
            "C": "A web server framework for Node.js",
            "D": "An operating system"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 61,
        "Question": "Which of the following is NOT a valid logical operator in MongoDB?",
        "Options": {
            "A": "$and",
            "B": "$or",
            "C": "$nor",
            "D": "$between"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 62,
        "Question": "How do you capture query parameters in Express routes?",
        "Options": {
            "A": "req.data",
            "B": "req.params",
            "C": "req.query",
            "D": "req.body"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 63,
        "Question": "Which MongoDB shell method is used to rename a collection?",
        "Options": {
            "A": "db.<collection_name>.rename()",
            "B": "db.<collection_name>.renameCollection()",
            "C": "db.<collection_name>.changeName()",
            "D": "db.<collection_name>.alter()"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 64,
        "Question": "What's the primary use of middleware in Express?",
        "Options": {
            "A": "Data storage",
            "B": "Error handling",
            "C": "Execution of functions in the request-response cycle",
            "D": "Frontend rendering"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 65,
        "Question": "What does the mongos command do?",
        "Options": {
            "A": "Starts the MongoDB server.",
            "B": "Starts a shard server.",
            "C": "Starts the MongoDB routing service.",
            "D": "Dumps the MongoDB database."
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 66,
        "Question": "How do you send a status of 404 and a message 'Not Found' in Express?",
        "Options": {
            "A": "res.status(404).message('Not Found')",
            "B": "res.status(404).send('Not Found')",
            "C": "res.send(404, 'Not Found')",
            "D": "res.sendStatus(404, 'Not Found')"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 67,
        "Question": "How do you capture data sent in the body of a POST request in Express?",
        "Options": {
            "A": "req.params",
            "B": "req.body",
            "C": "req.data",
            "D": "req.query"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 68,
        "Question": "To use req.body, what middleware must be used with Express?",
        "Options": {
            "A": "express.urlencoded()",
            "B": "express.query()",
            "C": "express.static()",
            "D": "express.getbody()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 69,
        "Question": "Which middleware in Express.js helps in handling JSON data from POST requests?",
        "Options": {
            "A": "express.json()",
            "B": "express.urlencoded()",
            "C": "express.parse()",
            "D": "express.data()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 70,
        "Question": "Which of the following methods is used to render a view in Express.js?",
        "Options": {
            "A": "res.view()",
            "B": "res.page()",
            "C": "res.sendView()",
            "D": "res.render()"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 71,
        "Question": "If you want to set a cookie in Express.js, which method would you use?",
        "Options": {
            "A": "res.setCookie()",
            "B": "res.cookie()",
            "C": "res.saveCookie()",
            "D": "res.putCookie()"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 72,
        "Question": "What will next() function do in Express middleware?",
        "Options": {
            "A": "It will end the response cycle.",
            "B": "It will pass control to the next middleware function.",
            "C": "It will restart the request-response cycle.",
            "D": "It will throw an error."
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 73,
        "Question": "To serve static files in Express, which built-in middleware would you use?",
        "Options": {
            "A": "express.static()",
            "B": "express.file()",
            "C": "express.serve()",
            "D": "express.folder()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 74,
        "Question": "What does app.all() method do in Express.js?",
        "Options": {
            "A": "It handles all HTTP methods.",
            "B": "It handles only POST and GET methods.",
            "C": "It restarts the app.",
            "D": "It closes all open routes."
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 75,
        "Question": "Which function in Express.js wraps an asynchronous function to catch all the errors?",
        "Options": {
            "A": "catchAsync()",
            "B": "asyncWrapper()",
            "C": "wrapAsync()",
            "D": "handleAsync()"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 76,
        "Question": "If you want to set several properties on a response at once in Express.js, which method would you use?",
        "Options": {
            "A": "res.set()",
            "B": "res.properties()",
            "C": "res.headerSet()",
            "D": "res.multiSet()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 77,
        "Question": "How can you access the query string parameters in Express.js?",
        "Options": {
            "A": "req.params",
            "B": "req.data",
            "C": "req.body",
            "D": "req.query"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 78,
        "Question": "What is the primary purpose of the Express 'Router'?",
        "Options": {
            "A": "To route different files in the file system.",
            "B": "To divide the application into modular, mountable route handlers.",
            "C": "To connect to different databases.",
            "D": "To parse incoming requests."
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 79,
        "Question": "How do you get the HTTP method (like GET, POST) of a client's request in Express?",
        "Options": {
            "A": "req.methodType()",
            "B": "req.httpMethod",
            "C": "req.type()",
            "D": "req.method"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 80,
        "Question": "How do you retrieve the value of a specific cookie sent in a request in Express.js?",
        "Options": {
            "A": "req.cookie.value",
            "B": "req.cookies[cookieName]",
            "C": "req.get('cookieName')",
            "D": "req.values.cookieName"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 81,
        "Question": "What does JSON stand for?",
        "Options": {
            "A": "JavaScript Oriented Notation",
            "B": "JavaScript Object Notation",
            "C": "Java Ordered Notation",
            "D": "Java Object Notation"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 82,
        "Question": "What is the file extension commonly used for JSON files?",
        "Options": {
            "A": ".xml",
            "B": ".js",
            "C": ".json",
            "D": ".html"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 83,
        "Question": "How do you represent data in JSON?",
        "Options": {
            "A": "Key-Value pairs",
            "B": "Metadata",
            "C": "Binary Data",
            "D": "Key-Object pairs"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 84,
        "Question": "Is JSON case-sensitive?",
        "Options": {
            "A": "Yes",
            "B": "No"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 85,
        "Question": "Which symbol is used to enclose JSON objects?",
        "Options": {
            "A": "[]",
            "B": "()",
            "C": "{}",
            "D": "\"\""
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 86,
        "Question": "In JSON, keys must always be of which data type?",
        "Options": {
            "A": "String",
            "B": "Number",
            "C": "Boolean",
            "D": "Object"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 87,
        "Question": "Which method is used to define a route that responds to POST requests in Express.js?",
        "Options": {
            "A": "app.post()",
            "B": "app.route()",
            "C": "app.add()",
            "D": "app.handle()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 88,
        "Question": "How do you include middleware in an Express.js application?",
        "Options": {
            "A": "app.use(middlewareFunction)",
            "B": "app.add(middlewareFunction)",
            "C": "app.middleware(middlewareFunction)",
            "D": "app.include(middlewareFunction)"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 89,
        "Question": "What is the purpose of Angular’s Router module?",
        "Options": {
            "A": "To manage navigation and routing in a single-page application",
            "B": "To handle form submissions",
            "C": "To manage component data binding",
            "D": "To perform server-side rendering"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 90,
        "Question": "Which of the following is used to handle errors in Express.js?",
        "Options": {
            "A": "Error-handling middleware",
            "B": "Catch blocks",
            "C": "Try blocks",
            "D": "Validation middleware"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 91,
        "Question": "How can you set a static directory in Express.js?",
        "Options": {
            "A": "app.use(express.static('public'))",
            "B": "app.static('public')",
            "C": "app.directory('public')",
            "D": "app.useStatic('public')"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 92,
        "Question": "Which module is used to handle HTTP requests in Express.js?",
        "Options": {
            "A": "http",
            "B": "request",
            "C": "express",
            "D": "axios"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 93,
        "Question": "Which of the following is a method to query documents in MongoDB?",
        "Options": {
            "A": "find()",
            "B": "select()",
            "C": "query()",
            "D": "get()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 94,
        "Question": "How do you delete a document in MongoDB?",
        "Options": {
            "A": "db.collection.remove(query)",
            "B": "db.collection.delete(query)",
            "C": "db.collection.drop(query)",
            "D": "db.collection.erase(query)"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 95,
        "Question": "What is the purpose of the aggregate() function in MongoDB?",
        "Options": {
            "A": "To perform complex data transformations",
            "B": "To perform simple queries",
            "C": "To insert new documents",
            "D": "To update existing documents"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 96,
        "Question": "What is a BSON file in MongoDB?",
        "Options": {
            "A": "Binary JSON file format",
            "B": "Binary Object Storage Network",
            "C": "Basic Storage Object Node",
            "D": "Binary Serialized Object Node"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 97,
        "Question": "How can you index a field in a MongoDB collection?",
        "Options": {
            "A": "db.collection.createIndex({ field: 1 })",
            "B": "db.collection.index({ field: 1 })",
            "C": "db.collection.addIndex({ field: 1 })",
            "D": "db.collection.indexField({ field: 1 })"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 98,
        "Question": "Which Angular module is required to use forms?",
        "Options": {
            "A": "FormsModule",
            "B": "ReactiveFormsModule",
            "C": "HttpClientModule",
            "D": "RouterModule"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 99,
        "Question": "What is Angular’s default rendering engine?",
        "Options": {
            "A": "Server-side rendering",
            "B": "Client-side rendering",
            "C": "Static site generation",
            "D": "Hybrid rendering"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 100,
        "Question": "How do you create a new Angular component using Angular CLI?",
        "Options": {
            "A": "ng generate component componentName",
            "B": "ng create component componentName",
            "C": "ng add component componentName",
            "D": "ng make component componentName"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 101,
        "Question": "Which decorator is used to define an Angular component?",
        "Options": {
            "A": "@Component",
            "B": "@Directive",
            "C": "@Module",
            "D": "@Service"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 102,
        "Question": "What is the purpose of the Angular ngOnInit lifecycle hook?",
        "Options": {
            "A": "To perform initialization logic after the component is constructed",
            "B": "To perform cleanup logic before the component is destroyed",
            "C": "To perform data binding",
            "D": "To manage component dependencies"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 103,
        "Question": "Which function is used to read a file asynchronously in Node.js?",
        "Options": {
            "A": "fs.readFile()",
            "B": "fs.open()",
            "C": "fs.read()",
            "D": "fs.fetch()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 104,
        "Question": "What is the purpose of the process.env object in Node.js?",
        "Options": {
            "A": "To access environment variables",
            "B": "To handle file streams",
            "C": "To manage HTTP requests",
            "D": "To manage database connections"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 105,
        "Question": "How do you handle errors in asynchronous functions using Promises in Node.js?",
        "Options": {
            "A": ".catch()",
            "B": ".error()",
            "C": ".fail()",
            "D": ".throw()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 106,
        "Question": "Which module is used to handle HTTP requests and responses in Node.js?",
        "Options": {
            "A": "http",
            "B": "fs",
            "C": "url",
            "D": "path"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 107,
        "Question": "What is the purpose of the require() function in Node.js?",
        "Options": {
            "A": "To include external modules or files",
            "B": "To perform HTTP requests",
            "C": "To read environment variables",
            "D": "To manage asynchronous operations"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 108,
        "Question": "What does the readonly modifier do in TypeScript?",
        "Options": {
            "A": "Makes a property immutable after initialization",
            "B": "Restricts a property to be used only in read operations",
            "C": "Makes a property optional",
            "D": "Ensures a property can only be written to"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 109,
        "Question": "How do you specify a function's return type in TypeScript?",
        "Options": {
            "A": "function name(): type {}",
            "B": "function name(type): {}",
            "C": "function name(type): return {}",
            "D": "function name() -> type {}"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 110,
        "Question": "How do you define a tuple in TypeScript?",
        "Options": {
            "A": "let tuple: [number, string]",
            "B": "let tuple: (number, string)",
            "C": "let tuple: [number | string]",
            "D": "let tuple: [number; string]"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 111,
        "Question": "What does the npm install command do?",
        "Options": {
            "A": "Installs the dependencies defined in package.json",
            "B": "Updates npm to the latest version",
            "C": "Uninstalls a package",
            "D": "Creates a new npm project"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 112,
        "Question": "Which technology in the MEAN stack is used for building user interfaces?",
        "Options": {
            "A": "Angular",
            "B": "Express",
            "C": "MongoDB",
            "D": "Node.js"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 113,
        "Question": "How can you globally install a package using npm?",
        "Options": {
            "A": "npm install -g packageName",
            "B": "npm global install packageName",
            "C": "npm add -g packageName",
            "D": "npm install --global packageName"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 114,
        "Question": "Which npm command is used to uninstall a package?",
        "Options": {
            "A": "npm uninstall packageName",
            "B": "npm remove packageName",
            "C": "npm delete packageName",
            "D": "npm drop packageName"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 115,
        "Question": "How do you update all packages to their latest versions using npm?",
        "Options": {
            "A": "npm update",
            "B": "npm upgrade",
            "C": "npm refresh",
            "D": "npm latest"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 116,
        "Question": "What is the default port for MySQL server?",
        "Options": {
            "A": "3306",
            "B": "3307",
            "C": "3308",
            "D": "3309"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 117,
        "Question": "Which SQL command is used to modify existing data in a table?",
        "Options": {
            "A": "UPDATE",
            "B": "ALTER",
            "C": "INSERT",
            "D": "SELECT"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 118,
        "Question": "What does the JOIN clause do in SQL?",
        "Options": {
            "A": "Combines rows from two or more tables",
            "B": "Deletes rows from a table",
            "C": "Updates a table schema",
            "D": "Creates a new table"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 119,
        "Question": "How do you create a new table in MySQL?",
        "Options": {
            "A": "CREATE TABLE tableName (column definitions);",
            "B": "NEW TABLE tableName (column definitions);",
            "C": "ADD TABLE tableName (column definitions);",
            "D": "BUILD TABLE tableName (column definitions);"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 120,
        "Question": "Which SQL statement is used to retrieve data from a database?",
        "Options": {
            "A": "SELECT",
            "B": "GET",
            "C": "FETCH",
            "D": "RETRIEVE"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 121,
        "Question": "What is the primary purpose of Node.js?",
        "Options": {
            "A": "To build scalable network applications",
            "B": "To manage SQL databases",
            "C": "To handle client-side rendering",
            "D": "To create static web pages"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 122,
        "Question": "How do you define a variable with a specific type in TypeScript?",
        "Options": {
            "A": "let variableName: type",
            "B": "let variableName = type",
            "C": "var variableName: type",
            "D": "const variableName: type"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 123,
        "Question": "In Express.js, what is the purpose of the next() function?",
        "Options": {
            "A": "To pass control to the next middleware function",
            "B": "To end the response",
            "C": "To redirect the client to a different route",
            "D": "To handle HTTP errors"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 124,
        "Question": "What is the purpose of MongoDB Atlas?",
        "Options": {
            "A": "To provide a cloud-based MongoDB service",
            "B": "To manage MySQL databases",
            "C": "To build Angular applications",
            "D": "To serve static files"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 125,
        "Question": "Which module is used in Node.js to work with the file system?",
        "Options": {
            "A": "fs",
            "B": "http",
            "C": "path",
            "D": "os"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 126,
        "Question": "What does the npm run command do?",
        "Options": {
            "A": "Executes a script defined in package.json",
            "B": "Starts a new npm project",
            "C": "Updates all npm packages",
            "D": "Installs a package globally"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 127,
        "Question": "How do you specify a method as private in TypeScript?",
        "Options": {
            "A": "private methodName()",
            "B": "protected methodName()",
            "C": "public methodName()",
            "D": "hidden methodName()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 128,
        "Question": "Which component of the MEAN stack is a NoSQL database?",
        "Options": {
            "A": "MongoDB",
            "B": "MySQL",
            "C": "PostgreSQL",
            "D": "SQLite"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 129,
        "Question": "Which component of the MEAN stack runs JavaScript on the server-side?",
        "Options": {
            "A": "Node.js",
            "B": "Angular",
            "C": "MongoDB",
            "D": "Express"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 130,
        "Question": "What role does Node.js play in the MEAN stack?",
        "Options": {
            "A": "Server-side runtime environment",
            "B": "Client-side framework",
            "C": "Database management",
            "D": "Web server"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 131,
        "Question": "How does Angular communicate with the server in a MEAN stack application?",
        "Options": {
            "A": "HTTP requests",
            "B": "WebSockets",
            "C": "File uploads",
            "D": "Direct database connections"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 132,
        "Question": "What is the primary function of Express in the MEAN stack?",
        "Options": {
            "A": "To handle HTTP requests and responses",
            "B": "To render client-side templates",
            "C": "To manage database connections",
            "D": "To build user interfaces"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 133,
        "Question": "Which component of the MEAN stack is responsible for data storage?",
        "Options": {
            "A": "MongoDB",
            "B": "Node.js",
            "C": "Angular",
            "D": "Express"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 134,
        "Question": "What is a major advantage of using the MEAN stack?",
        "Options": {
            "A": "Unified JavaScript development across the stack",
            "B": "Use of multiple languages for different layers",
            "C": "Exclusive use of SQL databases",
            "D": "Server-side rendering"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 135,
        "Question": "Which of the following is a benefit of using Angular in the MEAN stack?",
        "Options": {
            "A": "Two-way data binding",
            "B": "Direct database access",
            "C": "Built-in HTTP server",
            "D": "Non-JavaScript syntax"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 136,
        "Question": "What advantage does Node.js offer in the MEAN stack?",
        "Options": {
            "A": "Non-blocking I/O and high scalability",
            "B": "SQL database management",
            "C": "Client-side templating",
            "D": "Static site generation"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 137,
        "Question": "How does Express benefit developers in the MEAN stack?",
        "Options": {
            "A": "Simplifies routing and middleware management",
            "B": "Manages front-end components",
            "C": "Handles database queries",
            "D": "Provides data visualization"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 138,
        "Question": "What is a common security concern for Express applications?",
        "Options": {
            "A": "Cross-Site Scripting (XSS)",
            "B": "SQL Injection",
            "C": "Cross-Site Request Forgery (CSRF)",
            "D": "Man-in-the-Middle attacks"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 139,
        "Question": "How can you mitigate Cross-Site Request Forgery (CSRF) attacks in Express?",
        "Options": {
            "A": "Use the csurf middleware",
            "B": "Implement secure HTTP headers",
            "C": "Sanitize user inputs",
            "D": "Encrypt data at rest"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 140,
        "Question": "Which method is used to hash passwords in Node.js applications?",
        "Options": {
            "A": "bcrypt",
            "B": "md5",
            "C": "sha1",
            "D": "base64"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 141,
        "Question": "What is the purpose of HTTPS in securing web applications?",
        "Options": {
            "A": "To encrypt data transmitted between client and server",
            "B": "To manage user sessions",
            "C": "To handle server-side rendering",
            "D": "To cache static files"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 142,
        "Question": "Which of the following is a recommended practice for securing MongoDB?",
        "Options": {
            "A": "Enable authentication and authorization",
            "B": "Store data in plain text",
            "C": "Disable SSL/TLS",
            "D": "Use default configurations"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 143,
        "Question": "Which Angular feature helps in handling user inputs and validations?",
        "Options": {
            "A": "Reactive Forms",
            "B": "Angular Router",
            "C": "Angular Service",
            "D": "Angular Module"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 144,
        "Question": "How do you implement lazy loading in Angular?",
        "Options": {
            "A": "Using Angular Router with loadChildren",
            "B": "Using ngIf directives",
            "C": "Using Angular services",
            "D": "Using ngFor loops"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 145,
        "Question": "What is Angular’s mechanism for communication between components?",
        "Options": {
            "A": "Input and Output decorators",
            "B": "Angular Router",
            "C": "Angular Directives",
            "D": "Angular Services"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 146,
        "Question": "How does Angular handle state management?",
        "Options": {
            "A": "Using services and observables",
            "B": "Using localStorage",
            "C": "Using sessionStorage",
            "D": "Using global variables"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 147,
        "Question": "What is Angular’s ngOnInit lifecycle hook used for?",
        "Options": {
            "A": "To perform initialization logic after Angular sets up data-bound properties",
            "B": "To clean up resources before the component is destroyed",
            "C": "To bind data to the template",
            "D": "To perform HTTP requests"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 148,
        "Question": "When was AngularJS first released?",
        "Options": {
            "A": "2010",
            "B": "2012",
            "C": "2014",
            "D": "2016"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 149,
        "Question": "Which version of Angular introduced the Angular CLI?",
        "Options": {
            "A": "Angular 2",
            "B": "Angular 4",
            "C": "Angular 5",
            "D": "Angular 6"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 150,
        "Question": "In what year did Node.js become officially supported by the Node.js Foundation?",
        "Options": {
            "A": "2010",
            "B": "2014",
            "C": "2018",
            "D": "2016"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 151,
        "Question": "What is the role of services in Angular’s architecture?",
        "Options": {
            "A": "To share data and logic across components",
            "B": "To handle HTTP requests",
            "C": "To define routing rules",
            "D": "To manage component state"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 152,
        "Question": "What major feature was introduced in Angular 2?",
        "Options": {
            "A": "A complete rewrite of AngularJS",
            "B": "Directives only",
            "C": "The use of jQuery",
            "D": "Improved two-way data binding"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 153,
        "Question": "What is the main architectural pattern used by Angular?",
        "Options": {
            "A": "Component-based architecture",
            "B": "Model-View-Controller (MVC)",
            "C": "Service-oriented architecture (SOA)",
            "D": "Microservices architecture"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 154,
        "Question": "In the MEAN stack, what architecture pattern is commonly used for building applications?",
        "Options": {
            "A": "RESTful API architecture",
            "B": "Monolithic architecture",
            "C": "Service-oriented architecture (SOA)",
            "D": "Microservices architecture"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 155,
        "Question": "When was MongoDB first released?",
        "Options": {
            "A": "2007",
            "B": "2009",
            "C": "2010",
            "D": "2012"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 156,
        "Question": "What is the purpose of Express middleware in the architecture?",
        "Options": {
            "A": "To handle request and response transformations",
            "B": "To manage database connections",
            "C": "To render HTML templates",
            "D": "To create Angular components"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 157,
        "Question": "In Angular, how are events handled in a component template?",
        "Options": {
            "A": "Using event binding with parentheses",
            "B": "Using property binding with square brackets",
            "C": "Using directives",
            "D": "Using services"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 158,
        "Question": "What is the EventEmitter class used for in Angular?",
        "Options": {
            "A": "To create custom events and communicate between components",
            "B": "To manage HTTP requests",
            "C": "To handle form validations",
            "D": "To perform routing"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 159,
        "Question": "How does Node.js handle events?",
        "Options": {
            "A": "Through an event loop and event-driven architecture",
            "B": "Through multi-threading",
            "C": "By using synchronous operations",
            "D": "By using callback functions only"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 160,
        "Question": "What is the purpose of the on method in Node.js EventEmitter?",
        "Options": {
            "A": "To listen for specific events",
            "B": "To emit events",
            "C": "To remove event listeners",
            "D": "To trigger error events"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 161,
        "Question": "How can you handle click events in Angular templates?",
        "Options": {
            "A": "By using (click)=\"method()\" syntax",
            "B": "By using {{click()}} syntax",
            "C": "By using ng-click=\"method()\" syntax",
            "D": "By using onClick=\"method()\" syntax"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 162,
        "Question": "What feature of Angular allows for the creation of reusable UI components?",
        "Options": {
            "A": "Component-based architecture",
            "B": "Directives",
            "C": "Services",
            "D": "Pipes"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 163,
        "Question": "What feature of Node.js contributes to its high scalability?",
        "Options": {
            "A": "Non-blocking, event-driven I/O",
            "B": "Multi-threaded execution",
            "C": "Synchronous I/O operations",
            "D": "Default caching"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 164,
        "Question": "Which Angular feature helps with filtering and transforming data in templates?",
        "Options": {
            "A": "Pipes",
            "B": "Directives",
            "C": "Services",
            "D": "Guards"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 165,
        "Question": "How do you define an interface in TypeScript?",
        "Options": {
            "A": "interface InterfaceName {}",
            "B": "type InterfaceName = {}",
            "C": "class InterfaceName {}",
            "D": "object InterfaceName {}"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 166,
        "Question": "Can TypeScript interfaces extend other interfaces?",
        "Options": {
            "A": "Yes, using the extends keyword",
            "B": "No, interfaces cannot extend other interfaces",
            "C": "Yes, using the implements keyword",
            "D": "Yes, using the inherits keyword"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 167,
        "Question": "What is the default visibility of properties in an interface?",
        "Options": {
            "A": "Public",
            "B": "Private",
            "C": "Protected",
            "D": "Static"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 168,
        "Question": "How can you implement an interface in a class?",
        "Options": {
            "A": "class ClassName implements InterfaceName {}",
            "B": "class ClassName extends InterfaceName {}",
            "C": "class ClassName with InterfaceName {}",
            "D": "class ClassName includes InterfaceName {}"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 169,
        "Question": "Can an interface define methods in TypeScript?",
        "Options": {
            "A": "Yes, interfaces can define methods that implementing classes must provide",
            "B": "No, interfaces can only define properties",
            "C": "Yes, but only static methods",
            "D": "Yes, but only private methods"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 170,
        "Question": "How do you create a child component in Angular?",
        "Options": {
            "A": "By using Angular CLI with ng generate component component-name",
            "B": "By manually creating files and adding them to app.module.ts",
            "C": "By modifying the index.html file",
            "D": "By creating a new module"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 171,
        "Question": "How does a parent component pass data to a child component in Angular?",
        "Options": {
            "A": "Using @Input decorator",
            "B": "Using @Output decorator",
            "C": "Using Angular services",
            "D": "Using local storage"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 172,
        "Question": "How can a child component communicate with its parent component?",
        "Options": {
            "A": "Using @Output and EventEmitter",
            "B": "Using @Input",
            "C": "Using local storage",
            "D": "Using HTTP services"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 173,
        "Question": "What is the purpose of Angular's ng-content directive?",
        "Options": {
            "A": "To project content from a parent component into a child component",
            "B": "To bind data from a parent to a child component",
            "C": "To define routing rules",
            "D": "To handle form validation"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 174,
        "Question": "How do you access a child component's method from a parent component in Angular?",
        "Options": {
            "A": "Using ViewChild decorator",
            "B": "Using @Input",
            "C": "Using @Output",
            "D": "Using Angular services"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 175,
        "Question": "What is one-way data binding in Angular?",
        "Options": {
            "A": "Binding data from the component to the view",
            "B": "Binding data from the view to the component",
            "C": "Binding data between two components",
            "D": "Binding data between two services"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 176,
        "Question": "How do you achieve two-way data binding in Angular?",
        "Options": {
            "A": "Using [(ngModel)] syntax",
            "B": "Using {{}} interpolation",
            "C": "Using [property] binding",
            "D": "Using (event) binding"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 177,
        "Question": "What is the purpose of ngModel in Angular?",
        "Options": {
            "A": "To enable two-way data binding between a form element and a component property",
            "B": "To handle HTTP requests",
            "C": "To define routing rules",
            "D": "To manage lifecycle hooks"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 178,
        "Question": "How do you bind a class dynamically in Angular?",
        "Options": {
            "A": "Using [ngClass] directive",
            "B": "Using [class] binding",
            "C": "Using ngStyle directive",
            "D": "Using class attribute"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 179,
        "Question": "What is property binding in Angular?",
        "Options": {
            "A": "Binding the value of a component property to an element property",
            "B": "Binding an event handler to an element",
            "C": "Binding two component properties together",
            "D": "Binding data to a service"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 180,
        "Question": "Which method is used to query documents in MongoDB?",
        "Options": {
            "A": "query()",
            "B": "get()",
            "C": "select()",
            "D": "find()"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 181,
        "Question": "How do you apply a pipe to a data binding expression in Angular?",
        "Options": {
            "A": "Using the | character followed by the pipe name",
            "B": "Using square brackets []",
            "C": "Using parentheses ()",
            "D": "Using curly braces {}"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 182,
        "Question": "Which MongoDB command is used to list all databases?",
        "Options": {
            "A": "show dbs",
            "B": "list databases",
            "C": "db.show()",
            "D": "get databases"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 183,
        "Question": "How do you create a custom pipe in Angular?",
        "Options": {
            "A": "By implementing the PipeTransform interface and decorating with @Pipe",
            "B": "By extending the Pipe class",
            "C": "By using @Directive",
            "D": "By creating a service"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 184,
        "Question": "What is the difference between a pipe and a filter in Angular?",
        "Options": {
            "A": "Pipes transform data in templates, while filters are not used in Angular 2+",
            "B": "Filters are used to handle HTTP requests",
            "C": "Pipes handle routing, while filters handle component state",
            "D": "Filters are used for data transformation in Angular 1.x"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 185,
        "Question": "How do you define a route in Angular?",
        "Options": {
            "A": "By configuring routes in the RouterModule",
            "B": "By using the ngRoute module",
            "C": "By defining paths in the app.component.ts",
            "D": "By using ngFor directive"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 186,
        "Question": "What is the purpose of route guards in Angular?",
        "Options": {
            "A": "To define routing paths",
            "B": "To control access to routes based on certain conditions",
            "C": "To manage component lifecycle",
            "D": "To handle HTTP requests"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 187,
        "Question": "How do you pass parameters to a route in Angular?",
        "Options": {
            "A": "By binding parameters to service methods",
            "B": "By defining route parameters in the route configuration and accessing them via ActivatedRoute",
            "C": "By using query parameters in HTTP requests",
            "D": "By using localStorage"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 188,
        "Question": "Which Angular directive is used to conditionally include or exclude an element from the DOM?",
        "Options": {
            "A": "*ngSwitch",
            "B": "*ngIf",
            "C": "*ngFor",
            "D": "*ngClass"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 189,
        "Question": "What is the purpose of Angular services?",
        "Options": {
            "A": "To share data and logic across multiple components",
            "B": "To define component templates",
            "C": "To perform data binding",
            "D": "To manage routing"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 190,
        "Question": "How do you inject a service into an Angular component?",
        "Options": {
            "A": "By using the ngOnInit lifecycle hook",
            "B": "By defining the service in the component’s metadata",
            "C": "By using the constructor and @Injectable decorator",
            "D": "By using ngFor directive"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 191,
        "Question": "Which Angular service is commonly used to perform HTTP requests?",
        "Options": {
            "A": "HttpModule",
            "B": "HttpClient",
            "C": "HttpService",
            "D": "HttpRequest"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 192,
        "Question": "What is the purpose of Angular’s ngOnInit lifecycle hook?",
        "Options": {
            "A": "To bind data to a template",
            "B": "To destroy a component",
            "C": "To initialize data for a component",
            "D": "To handle HTTP requests"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 193,
        "Question": "Which directive is used to create a loop in Angular templates?",
        "Options": {
            "A": "*ngIf",
            "B": "*ngClass",
            "C": "*ngSwitch",
            "D": "*ngFor"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 194,
        "Question": "How do you define a module in Angular?",
        "Options": {
            "A": "By using @Service decorator",
            "B": "By using @NgModule decorator",
            "C": "By using @Component decorator",
            "D": "By using @Directive decorator"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 195,
        "Question": "What is data binding in Angular?",
        "Options": {
            "A": "The process of synchronizing data between the model and the view",
            "B": "The process of handling HTTP requests",
            "C": "The process of defining routes",
            "D": "The process of creating components"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 196,
        "Question": "What is Node.js primarily used for?",
        "Options": {
            "A": "Building mobile applications",
            "B": "Designing UI components",
            "C": "Writing SQL queries",
            "D": "Server-side JavaScript execution"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 197,
        "Question": "What is the default port number for a Node.js HTTP server?",
        "Options": {
            "A": "5000",
            "B": "3000",
            "C": "8080",
            "D": "80"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 198,
        "Question": "How do you read a file asynchronously in Node.js?",
        "Options": {
            "A": "fs.readFileSync",
            "B": "fs.open",
            "C": "fs.read",
            "D": "fs.readFile"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 199,
        "Question": "Which function is used to create a new HTTP server in Node.js?",
        "Options": {
            "A": "http.newServer()",
            "B": "http.listen()",
            "C": "http.createServer()",
            "D": "http.startServer()"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 200,
        "Question": "What is the TypeScript keyword for defining a constant variable?",
        "Options": {
            "A": "static",
            "B": "let",
            "C": "var",
            "D": "const"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 201,
        "Question": "What is TypeScript’s type for a floating-point number?",
        "Options": {
            "A": "double",
            "B": "int",
            "C": "number",
            "D": "float"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 202,
        "Question": "What is the purpose of the any type in TypeScript?",
        "Options": {
            "A": "To restrict a variable to a specific type",
            "B": "To create an interface",
            "C": "To allow a variable to be of any type",
            "D": "To define a custom type"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 203,
        "Question": "How do you define a method in a TypeScript class?",
        "Options": {
            "A": "def methodName() {}",
            "B": "function methodName() {}",
            "C": "method methodName() {}",
            "D": "methodName() {}"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 204,
        "Question": "What is the purpose of TypeScript’s interface keyword?",
        "Options": {
            "A": "To define a contract for objects and classes",
            "B": "To define global variables",
            "C": "To manage module imports",
            "D": "To create new instances"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 205,
        "Question": "How do you install the Express.js package?",
        "Options": {
            "A": "npm get express",
            "B": "npm install express",
            "C": "npm include express",
            "D": "npm add express"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 206,
        "Question": "What is the purpose of pipes in Angular?",
        "Options": {
            "A": "To transform data in templates",
            "B": "To handle HTTP responses",
            "C": "To define routing paths",
            "D": "To manage component state"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 207,
        "Question": "In Angular, which decorator is used to define a component?",
        "Options": {
            "A": "@Component",
            "B": "@Directive",
            "C": "@Injectable",
            "D": "@Pipe"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 208,
        "Question": "How do you create a new database in MySQL?",
        "Options": {
            "A": "MAKE DATABASE database_name;",
            "B": "ADD DATABASE database_name;",
            "C": "NEW DATABASE database_name;",
            "D": "CREATE DATABASE database_name;"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 209,
        "Question": "What command is used to list all tables in a MySQL database?",
        "Options": {
            "A": "LIST TABLES;",
            "B": "SHOW TABLES;",
            "C": "SHOW ALL;",
            "D": "GET TABLES;"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 210,
        "Question": "How do you add a new column to an existing table in MySQL?",
        "Options": {
            "A": "MODIFY TABLE table_name ADD column_name datatype;",
            "B": "ALTER TABLE table_name NEW column_name datatype;",
            "C": "UPDATE TABLE table_name ADD column_name datatype;",
            "D": "ALTER TABLE table_name ADD column_name datatype;"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 211,
        "Question": "In Angular, which file is typically used to define the application’s routes?",
        "Options": {
            "A": "app.component.ts",
            "B": "routes.ts",
            "C": "app.routing.ts",
            "D": "app.module.ts"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 212,
        "Question": "What is the default change detection strategy in Angular?",
        "Options": {
            "A": "OnPush",
            "B": "Default",
            "C": "Manual",
            "D": "Automatic"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 213,
        "Question": "What is the purpose of the __dirname variable in Node.js?",
        "Options": {
            "A": "To store the directory name of the current script",
            "B": "To define a new directory",
            "C": "To import a module",
            "D": "To handle file paths"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 214,
        "Question": "Which of the following is a middleware framework for Node.js?",
        "Options": {
            "A": "Express",
            "B": "Angular",
            "C": "React",
            "D": "Vue"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 215,
        "Question": "How do you insert a new document into a collection in MongoDB?",
        "Options": {
            "A": "db.collection.add()",
            "B": "db.collection.save()",
            "C": "db.collection.insertOne()",
            "D": "db.collection.put()"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 216,
        "Question": "What is the purpose of the ngOnInit lifecycle hook in Angular?",
        "Options": {
            "A": "To define a new route",
            "B": "To handle data binding",
            "C": "To initialize component data",
            "D": "To destroy a component"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 217,
        "Question": "In Angular, which service is used to make HTTP requests?",
        "Options": {
            "A": "HttpService",
            "B": "HttpClient",
            "C": "WebClient",
            "D": "RequestService"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 218,
        "Question": "What is the primary building block of an Angular application?",
        "Options": {
            "A": "Modules",
            "B": "Directives",
            "C": "Components",
            "D": "Pipes"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 219,
        "Question": "How can you redirect a user to a different URL in Express?",
        "Options": {
            "A": "Using the res.redirect() method",
            "B": "Using the res.send() method with a redirect status code",
            "C": "Using the res.location() method",
            "D": "Using the res.render() method with a redirect template"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 220,
        "Question": "In Angular, which directive is used to loop through an array of items?",
        "Options": {
            "A": "*ngIf",
            "B": "*ngFor",
            "C": "*ngSwitch",
            "D": "*ngLoop"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 221,
        "Question": "What is the purpose of the Angular CLI?",
        "Options": {
            "A": "To compile TypeScript to JavaScript",
            "B": "To facilitate Angular development",
            "C": "To write Angular tests",
            "D": "To provide Angular documentation"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 222,
        "Question": "In Angular, what does the @Input decorator do?",
        "Options": {
            "A": "Defines a component’s output",
            "B": "Marks a property as an input property",
            "C": "Creates a new component",
            "D": "Binds an event to a method"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 223,
        "Question": "In Node.js, which object provides information about the current process?",
        "Options": {
            "A": "process",
            "B": "console",
            "C": "system",
            "D": "app"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 224,
        "Question": "What does the fs module in Node.js handle?",
        "Options": {
            "A": "File system operations",
            "B": "Network requests",
            "C": "Database connections",
            "D": "HTTP responses"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 225,
        "Question": "Which command is used to create a new Angular project?",
        "Options": {
            "A": "ng create",
            "B": "ng init",
            "C": "ng start",
            "D": "ng new"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 226,
        "Question": "Which method in Node.js is used to read the contents of a file?",
        "Options": {
            "A": "readFile()",
            "B": "getFile()",
            "C": "loadFile()",
            "D": "fetchFile()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 227,
        "Question": "Which method is used to create a server in Node.js?",
        "Options": {
            "A": "http.createServer()",
            "B": "server.create()",
            "C": "net.createServer()",
            "D": "createServer()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 228,
        "Question": "What is the default package manager for Node.js?",
        "Options": {
            "A": "npm",
            "B": "yarn",
            "C": "pip",
            "D": "bower"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 229,
        "Question": "Which of the following is used to import a module in Node.js?",
        "Options": {
            "A": "import",
            "B": "require",
            "C": "include",
            "D": "load"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 230,
        "Question": "In Node.js, which event is emitted when there is an error in a stream?",
        "Options": {
            "A": "data",
            "B": "error",
            "C": "end",
            "D": "close"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 231,
        "Question": "In Node.js, what is the purpose of the package.json file?",
        "Options": {
            "A": "To store application data",
            "B": "To list project dependencies and metadata",
            "C": "To configure the Node.js runtime",
            "D": "To define environment variables"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 232,
        "Question": "Which of the following is used to handle HTTP requests in Node.js?",
        "Options": {
            "A": "fs module",
            "B": "http module",
            "C": "net module",
            "D": "os module"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 233,
        "Question": "Which method is used to create a new Express application?",
        "Options": {
            "A": "express.create()",
            "B": "express.init()",
            "C": "express()",
            "D": "new express()"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 234,
        "Question": "In Express, which method is used to define a route that handles GET requests?",
        "Options": {
            "A": "app.get()",
            "B": "app.post()",
            "C": "app.put()",
            "D": "app.route()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 235,
        "Question": "What is the default port used by an Express application?",
        "Options": {
            "A": "80",
            "B": "3000",
            "C": "8080",
            "D": "5000"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 236,
        "Question": "In Express, what does req represent in a route handler?",
        "Options": {
            "A": "Request object",
            "B": "Response object",
            "C": "Route object",
            "D": "Middleware object"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 237,
        "Question": "Which middleware is used to parse JSON bodies in Express?",
        "Options": {
            "A": "bodyParser.json()",
            "B": "express.json()",
            "C": "json()",
            "D": "app.json()"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 238,
        "Question": "In Express, which method is used to handle 404 errors?",
        "Options": {
            "A": "app.notFound()",
            "B": "app.error()",
            "C": "app.use() with a function",
            "D": "app.handle404()"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 239,
        "Question": "Which of the following is a templating engine supported by Express?",
        "Options": {
            "A": "EJS",
            "B": "Pug",
            "C": "Handlebars",
            "D": "All of the above"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 240,
        "Question": "How do you make a middleware function available in all routes in an Express application?",
        "Options": {
            "A": "Use app.all()",
            "B": "Use app.use()",
            "C": "Use app.route()",
            "D": "Use app.middleware()"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 241,
        "Question": "Which of the following is true about Express middleware?",
        "Options": {
            "A": "Middleware functions have access to the req and res objects.",
            "B": "Middleware functions can modify the request and response objects.",
            "C": "Middleware functions can end the request-response cycle.",
            "D": "All of the above"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 242,
        "Question": "In MySQL, which function is used to calculate the total number of rows in a table?",
        "Options": {
            "A": "SUM()",
            "B": "COUNT()",
            "C": "TOTAL()",
            "D": "ROWS()"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 243,
        "Question": "Which method is used to serve static files in an Express application?",
        "Options": {
            "A": "express.static()",
            "B": "app.serve()",
            "C": "app.static()",
            "D": "express.serve()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 244,
        "Question": "What does res.json() do in an Express route handler?",
        "Options": {
            "A": "Sends a JSON response",
            "B": "Sends a file as a response",
            "C": "Sends an HTML response",
            "D": "Redirects to another URL"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 245,
        "Question": "How do you define a route that handles all HTTP methods in Express?",
        "Options": {
            "A": "app.all()",
            "B": "app.any()",
            "C": "app.route()",
            "D": "app.methods()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 246,
        "Question": "Which keyword is used to remove data from a table in MySQL?",
        "Options": {
            "A": "DELETE",
            "B": "REMOVE",
            "C": "DROP",
            "D": "TRUNCATE"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 247,
        "Question": "Which command is used to create a new database in MySQL?",
        "Options": {
            "A": "CREATE DATABASE",
            "B": "NEW DATABASE",
            "C": "ADD DATABASE",
            "D": "MAKE DATABASE"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 248,
        "Question": "In Express, what does res.send() do?",
        "Options": {
            "A": "Sends a JSON response",
            "B": "Sends an HTTP response",
            "C": "Sends a file to the client",
            "D": "Redirects the request"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 249,
        "Question": "Which SQL statement is used to add a new column to an existing table in MySQL?",
        "Options": {
            "A": "ALTER TABLE",
            "B": "ADD COLUMN",
            "C": "MODIFY TABLE",
            "D": "UPDATE TABLE"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 250,
        "Question": "In MySQL, what is the purpose of the GROUP BY clause?",
        "Options": {
            "A": "To sort the result set",
            "B": "To filter rows",
            "C": "To group rows that have the same values",
            "D": "To join two tables"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 251,
        "Question": "Which data type is used to store large text data in MySQL?",
        "Options": {
            "A": "VARCHAR",
            "B": "TEXT",
            "C": "BLOB",
            "D": "CHAR"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 252,
        "Question": "In MySQL, which clause is used to specify the condition for selecting rows?",
        "Options": {
            "A": "WHERE",
            "B": "HAVING",
            "C": "LIMIT",
            "D": "SELECT"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 253,
        "Question": "What does the JOIN clause do in MySQL?",
        "Options": {
            "A": "Combines rows from two or more tables",
            "B": "Filters rows based on a condition",
            "C": "Updates multiple tables",
            "D": "Deletes data from multiple tables"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 254,
        "Question": "Which MySQL command is used to delete a table?",
        "Options": {
            "A": "DELETE TABLE",
            "B": "DROP TABLE",
            "C": "REMOVE TABLE",
            "D": "TRUNCATE TABLE"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 255,
        "Question": "What is the purpose of Angular's dependency injection?",
        "Options": {
            "A": "To manage app states",
            "B": "To separate application logic from DOM manipulation",
            "C": "To enhance testing by providing mock dependencies",
            "D": "To create dynamic CSS classes"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 256,
        "Question": "Which of the following is not a valid MySQL storage engine?",
        "Options": {
            "A": "InnoDB",
            "B": "MyISAM",
            "C": "MongoDB",
            "D": "MEMORY"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 257,
        "Question": "What is the purpose of the LIMIT clause in MySQL?",
        "Options": {
            "A": "To limit the number of columns in a query",
            "B": "To limit the number of rows returned",
            "C": "To limit the data types used",
            "D": "To limit the size of a database"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 258,
        "Question": "Which Angular feature enables the creation of interactive single-page applications?",
        "Options": {
            "A": "Routing",
            "B": "Data binding",
            "C": "Services",
            "D": "Directives"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 259,
        "Question": "Which Angular directive is used for conditional rendering?",
        "Options": {
            "A": "*ngIf",
            "B": "*ngFor",
            "C": "*ngSwitch",
            "D": "*ngModel"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 260,
        "Question": "What is the default data format used by MongoDB?",
        "Options": {
            "A": "JSON",
            "B": "XML",
            "C": "BSON",
            "D": "CSV"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 261,
        "Question": "What is the purpose of the find() method in MongoDB?",
        "Options": {
            "A": "To retrieve documents from a collection",
            "B": "To insert new documents into a collection",
            "C": "To update documents in a collection",
            "D": "To delete documents from a collection"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 262,
        "Question": "Which symbol is used for interpolation in Angular?",
        "Options": {
            "A": "{}",
            "B": "[]",
            "C": "()",
            "D": "{{}}"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 263,
        "Question": "How do you update a document in MongoDB?",
        "Options": {
            "A": "db.collection.updateOne()",
            "B": "db.collection.modify()",
            "C": "db.collection.change()",
            "D": "db.collection.replace()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 264,
        "Question": "Which of the following is not a form of data binding in Angular?",
        "Options": {
            "A": "Interpolation",
            "B": "Property Binding",
            "C": "Event Binding",
            "D": "Function Binding"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 265,
        "Question": "What does the ObjectId represent in MongoDB?",
        "Options": {
            "A": "A unique identifier for each document",
            "B": "A reference to another document",
            "C": "A binary data type",
            "D": "A timestamp of document creation"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 266,
        "Question": "In MongoDB, what does the $match operator do in an aggregation pipeline?",
        "Options": {
            "A": "Filters documents based on specified criteria",
            "B": "Groups documents by a specific field",
            "C": "Sorts documents in a specified order",
            "D": "Limits the number of documents"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 267,
        "Question": "In Angular, which syntax is used for property binding?",
        "Options": {
            "A": "{{property}}",
            "B": "[property]",
            "C": "(property)",
            "D": "{property}"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 268,
        "Question": "What is two-way data binding in Angular?",
        "Options": {
            "A": "Binding data from the template to the component",
            "B": "Binding data from the component to the template",
            "C": "Binding data between the component and template in both directions",
            "D": "Binding data between two different components"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 269,
        "Question": "What is the syntax for event binding in Angular?",
        "Options": {
            "A": "{{event}}",
            "B": "[event]",
            "C": "(event)",
            "D": "{event}"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 270,
        "Question": "In MongoDB, which command is used to drop a database?",
        "Options": {
            "A": "db.dropDatabase()",
            "B": "db.removeDatabase()",
            "C": "db.deleteDatabase()",
            "D": "db.eraseDatabase()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 271,
        "Question": "How do you pass data from a child component to a parent component in Angular?",
        "Options": {
            "A": "Using services",
            "B": "Using @Input properties",
            "C": "Using serve",
            "D": "Using @Output properties"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 272,
        "Question": "What is the purpose of an index in MongoDB?",
        "Options": {
            "A": "To improve the performance of queries",
            "B": "To enforce data validation rules",
            "C": "To automatically backup data",
            "D": "To define the schema of a collection"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 273,
        "Question": "In MongoDB, which method is used to delete a document from a collection?",
        "Options": {
            "A": "db.collection.deleteOne()",
            "B": "db.collection.remove()",
            "C": "db.collection.drop()",
            "D": "db.collection.erase()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 274,
        "Question": "How is two-way binding implemented in Angular?",
        "Options": {
            "A": "Using [(ngModel)]",
            "B": "Using {{ngModel}}",
            "C": "Using [ngModel]",
            "D": "Using (ngModel)"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 275,
        "Question": "What does the Angular ngModel directive do?",
        "Options": {
            "A": "It creates a new model",
            "B": "It synchronizes the value of an input field with a property",
            "C": "It binds a function to a model",
            "D": "It updates the model based on user interactions"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 276,
        "Question": "In MySQL, which function is used to return the current date and time?",
        "Options": {
            "A": "NOW()",
            "B": "CURRENT_DATE()",
            "C": "GETDATE()",
            "D": "TODAY()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 277,
        "Question": "Which binding method is used to style an element dynamically in Angular?",
        "Options": {
            "A": "Class Binding",
            "B": "Style Binding",
            "C": "Property Binding",
            "D": "Event Binding"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 278,
        "Question": "Which method is used to insert a new document in a MongoDB collection?",
        "Options": {
            "A": "db.collection.insertOne()",
            "B": "db.collection.add()",
            "C": "db.collection.new()",
            "D": "db.collection.create()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 279,
        "Question": "Which feature of Angular improves code maintainability?",
        "Options": {
            "A": "Modular architecture",
            "B": "Event binding",
            "C": "Two-way data binding",
            "D": "DOM manipulation"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 280,
        "Question": "What is the purpose of the @Output decorator in Angular?",
        "Options": {
            "A": "To bind an output field",
            "B": "To define a function that outputs data",
            "C": "To mark a property as an output property",
            "D": "To bind an event emitter to a property"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 281,
        "Question": "Which of the following is a valid MongoDB data type?",
        "Options": {
            "A": "String",
            "B": "Integer",
            "C": "ObjectId",
            "D": "All of the above"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 282,
        "Question": "What is the purpose of the ngOnChanges lifecycle hook in Angular?",
        "Options": {
            "A": "It initializes the component",
            "B": "It detects changes to input properties",
            "C": "It cleans up resources",
            "D": "It binds data to the component"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 283,
        "Question": "How do you retrieve unique values from a column in MySQL?",
        "Options": {
            "A": "Using the DISTINCT keyword",
            "B": "Using the UNIQUE keyword",
            "C": "Using the DISTINCTROW keyword",
            "D": "Using the LIMIT keyword"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 284,
        "Question": "What is the purpose of the aggregate() method in MongoDB?",
        "Options": {
            "A": "To perform complex data processing and analysis",
            "B": "To insert multiple documents at once",
            "C": "To delete multiple documents at once",
            "D": "To create a new collection"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 285,
        "Question": "What does the Angular @ViewChild decorator do?",
        "Options": {
            "A": "Binds a child view to a property",
            "B": "Marks a component as a child view",
            "C": "Gets a reference to a child component or element",
            "D": "Binds a method to a child view"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 286,
        "Question": "What is one of the main benefits of using Angular?",
        "Options": {
            "A": "It is a server-side framework",
            "B": "It provides a rich user interface",
            "C": "It simplifies HTML into an easily understandable format",
            "D": "It supports dynamic content generation"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 287,
        "Question": "Which MongoDB command is used to display all collections in a database?",
        "Options": {
            "A": "show collections",
            "B": "list collections",
            "C": "display collections",
            "D": "get collections"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 288,
        "Question": "What is the primary benefit of using Angular's two-way data binding?",
        "Options": {
            "A": "It makes code more complex",
            "B": "It reduces the amount of boilerplate code",
            "C": "It eliminates the need for directives",
            "D": "It ensures data integrity"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 289,
        "Question": "How does Angular's component-based architecture benefit developers?",
        "Options": {
            "A": "It allows for faster compilation",
            "B": "It reduces code duplication and enhances modularity",
            "C": "It simplifies routing implementation",
            "D": "It improves performance by caching components"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 290,
        "Question": "What advantage does Angular offer over traditional JavaScript frameworks?",
        "Options": {
            "A": "Strong typing and error checking",
            "B": "Limited third-party library support",
            "C": "Client-side rendering only",
            "D": "Reduced cross-browser compatibility"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 291,
        "Question": "What does MEAN stand for in the MEAN stack?",
        "Options": {
            "A": "MongoDB, Express, Angular, Node.js",
            "B": "MySQL, Express, Angular, Node.js",
            "C": "MongoDB, Express, Angular, Nest.js",
            "D": "MongoDB, Ember, Angular, Node.js"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 292,
        "Question": "Which part of the MEAN stack is responsible for handling server-side operations?",
        "Options": {
            "A": "MongoDB",
            "B": "Express",
            "C": "Angular",
            "D": "Node.js"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 293,
        "Question": "In the MEAN stack, which technology is used for the frontend framework?",
        "Options": {
            "A": "React",
            "B": "Angular",
            "C": "Vue",
            "D": "Ember"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 294,
        "Question": "What does the typeof operator return in TypeScript?",
        "Options": {
            "A": "The value of the variable",
            "B": "The type of the variable as a string",
            "C": "The size of the variable in bytes",
            "D": "The memory address of the variable"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 295,
        "Question": "Which MEAN stack component is used for creating RESTful APIs?",
        "Options": {
            "A": "MongoDB",
            "B": "Express",
            "C": "Angular",
            "D": "Node.js"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 296,
        "Question": "What is the purpose of the super keyword in TypeScript?",
        "Options": {
            "A": "To refer to the current instance of a class",
            "B": "To access and call functions on an object's parent",
            "C": "To define a new class",
            "D": "To declare a class as a singleton"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 297,
        "Question": "What is the benefit of using the MEAN stack for web application development?",
        "Options": {
            "A": "It provides a complete end-to-end JavaScript solution",
            "B": "It limits the use of third-party libraries",
            "C": "It offers server-side rendering by default",
            "D": "It simplifies backend development only"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 298,
        "Question": "Which of the following is a common use case for the MEAN stack?",
        "Options": {
            "A": "Developing desktop applications",
            "B": "Creating mobile applications",
            "C": "Building single-page web applications",
            "D": "Developing command-line tools"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 299,
        "Question": "Which of the following TypeScript features helps ensure type safety when working with JSON data?",
        "Options": {
            "A": "Type assertions",
            "B": "Type casting",
            "C": "Type inference",
            "D": "Type guards"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 300,
        "Question": "What is the purpose of Node.js modules?",
        "Options": {
            "A": "To create new web servers",
            "B": "To organize code into reusable components",
            "C": "To manage database connections",
            "D": "To facilitate routing in web applications"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 301,
        "Question": "Which of the following is a correct way to create a generic type in TypeScript?",
        "Options": {
            "A": "function identity<T>(arg: T): T { return arg; }",
            "B": "function identity(arg: T): T { return arg; }",
            "C": "function identity<T>(arg): T { return arg; }",
            "D": "function identity(arg): T { return arg; }"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 302,
        "Question": "Which of the following is a correct way to use the ternary operator in TypeScript?",
        "Options": {
            "A": "condition ? expr1 : expr2",
            "B": "condition ? (expr1, expr2)",
            "C": "condition : expr1 ? expr2",
            "D": "condition then expr1 else expr2"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 303,
        "Question": "What is the role of MongoDB in the MEAN stack?",
        "Options": {
            "A": "To serve as the server-side framework",
            "B": "To manage user authentication",
            "C": "To store and retrieve data as a NoSQL database",
            "D": "To provide a frontend user interface"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 304,
        "Question": "Which operator is used to spread the properties of an object in TypeScript?",
        "Options": {
            "A": "+",
            "B": "...",
            "C": "=>",
            "D": "@"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 305,
        "Question": "Which operator is used to check if a property exists in an object in TypeScript?",
        "Options": {
            "A": "in",
            "B": "of",
            "C": "exists",
            "D": "has"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 306,
        "Question": "Which method is used to read a file in Node.js using the fs module?",
        "Options": {
            "A": "fs.readFile()",
            "B": "fs.getFile()",
            "C": "fs.openFile()",
            "D": "fs.fetchFile()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 307,
        "Question": "Which fs method is used to append data to an existing file in Node.js?",
        "Options": {
            "A": "fs.appendFile()",
            "B": "fs.writeFile()",
            "C": "fs.addFile()",
            "D": "fs.insertFile()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 308,
        "Question": "How do you create a mapped type in TypeScript?",
        "Options": {
            "A": "By using the map keyword with the type keyword",
            "B": "By using the type keyword with an object syntax",
            "C": "By using the keyof keyword with the type keyword",
            "D": "By using the type keyword with an array syntax"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 309,
        "Question": "How do you terminate an HTTP server in Node.js?",
        "Options": {
            "A": "server.terminate()",
            "B": "server.close()",
            "C": "server.stop()",
            "D": "server.shutdown()"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 310,
        "Question": "What is the purpose of the http module in Node.js?",
        "Options": {
            "A": "To manage file operations",
            "B": "To create and manage HTTP servers and clients",
            "C": "To perform database operations",
            "D": "To handle user authentication"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 311,
        "Question": "Which method is used to create a server in Node.js using the http module?",
        "Options": {
            "A": "http.newServer()",
            "B": "http.createServer()",
            "C": "http.startServer()",
            "D": "http.openServer()"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 312,
        "Question": "Can a TypeScript interface have optional properties?",
        "Options": {
            "A": "Yes, using the ? symbol after the property name",
            "B": "No, all properties must be defined",
            "C": "Yes, using the optional keyword",
            "D": "Yes, by omitting the property type"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 313,
        "Question": "Which event is emitted when a client makes a request to the server in Node.js?",
        "Options": {
            "A": "request",
            "B": "data",
            "C": "connection",
            "D": "listen"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 314,
        "Question": "How do you send a response to a client in Node.js using the http module?",
        "Options": {
            "A": "response.send()",
            "B": "response.end()",
            "C": "response.write()",
            "D": "response.output()"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 315,
        "Question": "Which of the following is a correct way to write headers in an HTTP response in Node.js?",
        "Options": {
            "A": "response.headers()",
            "B": "response.setHeader()",
            "C": "response.writeHeader()",
            "D": "response.header()"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 316,
        "Question": "How do you handle errors in the http module in Node.js?",
        "Options": {
            "A": "Using try-catch blocks",
            "B": "Using the error event",
            "C": "Using the catchError method",
            "D": "By logging to the console"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 317,
        "Question": "What is a type alias in TypeScript?",
        "Options": {
            "A": "A variable that holds a type",
            "B": "A name given to a specific type or union of types",
            "C": "An alternative name for a class",
            "D": "A function that returns a type"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 318,
        "Question": "How can you check if a file exists in Node.js using the fs module?",
        "Options": {
            "A": "fs.fileExists()",
            "B": "fs.existsSync()",
            "C": "fs.checkFile()",
            "D": "fs.isFile()"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 319,
        "Question": "Which method is used to rename a file in Node.js?",
        "Options": {
            "A": "fs.renameFile()",
            "B": "fs.changeName()",
            "C": "fs.rename()",
            "D": "fs.modifyFile()"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 320,
        "Question": "What is the purpose of the fs.mkdir() method in Node.js?",
        "Options": {
            "A": "To read a directory",
            "B": "To create a new directory",
            "C": "To delete a directory",
            "D": "To rename a directory"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 321,
        "Question": "Which fs method is used to read the contents of a directory in Node.js?",
        "Options": {
            "A": "fs.readDir()",
            "B": "fs.getDir()",
            "C": "fs.readdir()",
            "D": "fs.listDir()"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 322,
        "Question": "Which command is used to exit the Node REPL?",
        "Options": {
            "A": "quit()",
            "B": "exit()",
            "C": "close()",
            "D": "end()"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 323,
        "Question": "Which command is used to compile a TypeScript file?",
        "Options": {
            "A": "tsc",
            "B": "ts",
            "C": "tscompile",
            "D": "typescript"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 324,
        "Question": "Which keyword is used to declare a variable in TypeScript?",
        "Options": {
            "A": "let",
            "B": "var",
            "C": "const",
            "D": "All of the above"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 325,
        "Question": "Which module is primarily used for cryptographic functions in Node.js?",
        "Options": {
            "A": "crypto",
            "B": "security",
            "C": "cipher",
            "D": "encrypt"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 326,
        "Question": "What is the purpose of the ?? operator in TypeScript?",
        "Options": {
            "A": "To check for null values",
            "B": "To perform a nullish coalescing operation",
            "C": "To concatenate strings",
            "D": "To perform a type assertion"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 327,
        "Question": "Which of the following is not a valid TypeScript data type?",
        "Options": {
            "A": "boolean",
            "B": "string",
            "C": "integer",
            "D": "any"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 328,
        "Question": "How do you set a cookie in Express?",
        "Options": {
            "A": "Using the res.cookie() method",
            "B": "Using the req.cookie() method",
            "C": "Using the app.cookie() method",
            "D": "Using the cookie() middleware"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 329,
        "Question": "In TypeScript, what does the readonly modifier do?",
        "Options": {
            "A": "It makes the variable constant",
            "B": "It makes the variable read-only after initial assignment",
            "C": "It prevents the variable from being accessed",
            "D": "It makes the variable accessible only within the class"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 330,
        "Question": "What does the http.get() method do in Node.js?",
        "Options": {
            "A": "Creates an HTTP server",
            "B": "Sends a GET request to a specified URL",
            "C": "Starts listening on a port",
            "D": "Retrieves server logs"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 331,
        "Question": "What is the use of the as keyword in TypeScript?",
        "Options": {
            "A": "To assign a new type to a variable",
            "B": "To create an alias for a type",
            "C": "To typecast a variable to a specific type",
            "D": "To declare a variable with a specified type"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 332,
        "Question": "Which TypeScript feature allows you to define a variable without specifying its type, allowing it to be assigned any type?",
        "Options": {
            "A": "any",
            "B": "unknown",
            "C": "object",
            "D": "dynamic"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 333,
        "Question": "Which of the following is a correct way to declare a tuple in TypeScript?",
        "Options": {
            "A": "let tuple: [number, string] = [1, \"one\"];",
            "B": "let tuple = (1, \"one\");",
            "C": "let tuple: {number, string} = {1, \"one\"};",
            "D": "let tuple: array = [1, \"one\"];"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 334,
        "Question": "What is the default value of a boolean variable in TypeScript?",
        "Options": {
            "A": "true",
            "B": "false",
            "C": "null",
            "D": "undefined"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 335,
        "Question": "What does the unknown type represent in TypeScript?",
        "Options": {
            "A": "It represents an error in type declaration",
            "B": "It is a type-safe counterpart of any and requires type checking before assignment",
            "C": "It represents a missing value",
            "D": "It is used for variables that can be of any type"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 336,
        "Question": "How do you declare an enum in TypeScript?",
        "Options": {
            "A": "enum Colors { R, G, B }",
            "B": "enum Colors = { Red, Green, Yellow }",
            "C": "enum Colors [ Red, Green, Blue ]",
            "D": "enum Colors ( Red, Pink, Blue )"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 337,
        "Question": "What is the recommended way to handle user passwords in Express applications?",
        "Options": {
            "A": "Store them in plain text in the database",
            "B": "Store them as hashed values in the database",
            "C": "Store them encrypted in a cookie",
            "D": "Store them in an environment variable"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 338,
        "Question": "Which of the following is true about the void type in TypeScript?",
        "Options": {
            "A": "It represents a function that does not return a value",
            "B": "It represents a variable that is uninitialized",
            "C": "It is used for variables that can be any type",
            "D": "It is used for functions that return a boolean"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 339,
        "Question": "How do you pass data to a layout template in EJS?",
        "Options": {
            "A": "Using the layout option in the res.render() method",
            "B": "Using the locals object in the layout template",
            "C": "Using the include tag in the main template",
            "D": "Using the partial tag in the main template"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 340,
        "Question": "What will be the result of the following TypeScript expression? let x = 5; let y = x++;",
        "Options": {
            "A": "x = 6, y = 6",
            "B": "x = 5, y = 6",
            "C": "x = 6, y = 5",
            "D": "x = 5, y = 5"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 341,
        "Question": "Which keyword is used to create a class in TypeScript?",
        "Options": {
            "A": "object",
            "B": "struct",
            "C": "class",
            "D": "module"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 342,
        "Question": "How can you create nested routes in Express?",
        "Options": {
            "A": "By using multiple app.use() statements",
            "B": "By using the express.Router() object",
            "C": "By using the app.mount() method",
            "D": "By using the app.subroutes() method"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 343,
        "Question": "Which of the following is true about inheritance in TypeScript?",
        "Options": {
            "A": "A class can inherit from multiple classes",
            "B": "A class can only inherit from one class",
            "C": "A class cannot inherit from another class",
            "D": "Inheritance is not supported in TypeScript"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 344,
        "Question": "What is the purpose of the exports object in Node.js?",
        "Options": {
            "A": "To import modules",
            "B": "To export multiple functions or variables from a module",
            "C": "To define a default module export",
            "D": "To configure module settings"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 345,
        "Question": "Which of the following is a built-in module in Node.js?",
        "Options": {
            "A": "fs",
            "B": "lodash",
            "C": "express",
            "D": "react"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 346,
        "Question": "How do you make a module's functionality available to other modules in Node.js?",
        "Options": {
            "A": "By using the require() function",
            "B": "By exporting the functionality using module.exports",
            "C": "By referencing the module directly in the code",
            "D": "By declaring the functionality as public"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 347,
        "Question": "What is the main benefit of using modules in Node.js?",
        "Options": {
            "A": "It increases the application size",
            "B": "It improves code maintainability and reusability",
            "C": "It restricts the use of third-party libraries",
            "D": "It simplifies debugging by reducing code separation"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 348,
        "Question": "How do you access the exports of another module in Node.js?",
        "Options": {
            "A": "By calling the module name directly",
            "B": "By using the exports object",
            "C": "By assigning the result of require() to a variable",
            "D": "By invoking the import() function"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 349,
        "Question": "What is the purpose of the AUTO_INCREMENT attribute in MySQL?",
        "Options": {
            "A": "To automatically generate a unique value for each row",
            "B": "To automatically update a column",
            "C": "To automatically create a new column",
            "D": "To automatically delete a row"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 350,
        "Question": "Which command is used to create a new collection in MongoDB?",
        "Options": {
            "A": "db.createCollection()",
            "B": "db.addCollection()",
            "C": "db.newCollection()",
            "D": "db.insertCollection()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 351,
        "Question": "In MongoDB, what does a document represent?",
        "Options": {
            "A": "A record in a collection",
            "B": "A table in a database",
            "C": "A column in a table",
            "D": "A database itself"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 352,
        "Question": "Which operator is used to perform bitwise AND in TypeScript?",
        "Options": {
            "A": "&&",
            "B": "and",
            "C": "&",
            "D": "||"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 353,
        "Question": "What is the purpose of the session middleware in Express?",
        "Options": {
            "A": "To manage user sessions",
            "B": "To handle cookies",
            "C": "To encrypt data",
            "D": "To validate user input"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 354,
        "Question": "How does the === operator differ from the == operator in TypeScript?",
        "Options": {
            "A": "=== performs type conversion, == does not",
            "B": "=== checks for strict equality, == checks for loose equality",
            "C": "=== is a bitwise operator, == is a logical operator",
            "D": "=== is used for string comparison, == is used for number comparison"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 355,
        "Question": "In TypeScript, what does the ? symbol after a property name in an interface signify?",
        "Options": {
            "A": "The property is optional",
            "B": "The property is deprecated",
            "C": "The property is of type any",
            "D": "The property is read-only"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 356,
        "Question": "What is the purpose of HTTP Strict Transport Security (HSTS)?",
        "Options": {
            "A": "To prevent clickjacking attacks",
            "B": "To enforce HTTPS connections",
            "C": "To protect against XSS attacks",
            "D": "To prevent CSRF attacks"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 357,
        "Question": "Which of the following is a correct way to declare a constructor in a TypeScript class?",
        "Options": {
            "A": "constructor() {}",
            "B": "construct() {}",
            "C": "classConstructor() {}",
            "D": "initialize() {}"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 358,
        "Question": "What is the purpose of the static keyword in TypeScript?",
        "Options": {
            "A": "To declare a variable that cannot be changed",
            "B": "To define a class method or property that can be accessed without creating an instance",
            "C": "To indicate that a class cannot be extended",
            "D": "To specify a default method in a class"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 359,
        "Question": "How do you create an instance of a class in TypeScript?",
        "Options": {
            "A": "let obj = className();",
            "B": "let obj = new className();",
            "C": "let obj = create className();",
            "D": "let obj = className.new();"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 360,
        "Question": "What is the use of the abstract keyword in TypeScript?",
        "Options": {
            "A": "To declare a class or method that cannot be instantiated or used directly",
            "B": "To create a singleton class",
            "C": "To indicate that a class is final and cannot be extended",
            "D": "To define a method that must be overridden in a subclass"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 361,
        "Question": "How do you define a class that inherits from another class in TypeScript?",
        "Options": {
            "A": "class SubClass inherits BaseClass {}",
            "B": "class SubClass extends BaseClass {}",
            "C": "class SubClass implements BaseClass {}",
            "D": "class SubClass derives BaseClass {}"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 362,
        "Question": "What is polymorphism in the context of TypeScript OOP?",
        "Options": {
            "A": "The ability of a class to inherit from multiple classes",
            "B": "The ability of different objects to respond uniquely to the same method call",
            "C": "The ability of a class to encapsulate data and methods",
            "D": "The ability of a class to prevent instantiation"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 363,
        "Question": "Which access modifier restricts access to a class member to the class itself and its subclasses?",
        "Options": {
            "A": "public",
            "B": "private",
            "C": "protected",
            "D": "readonly"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 364,
        "Question": "What is an interface in TypeScript?",
        "Options": {
            "A": "A class that provides default methods",
            "B": "A blueprint for classes, specifying the structure but not the implementation",
            "C": "A mechanism to handle asynchronous operations",
            "D": "A special type of function"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 365,
        "Question": "Which keyword is used to declare an interface in TypeScript?",
        "Options": {
            "A": "class",
            "B": "struct",
            "C": "interface",
            "D": "object"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 366,
        "Question": "How do you implement an interface in a TypeScript class?",
        "Options": {
            "A": "class MyClass inherits MyInterface {}",
            "B": "class MyClass extends MyInterface {}",
            "C": "class MyClass implements MyInterface {}",
            "D": "class MyClass uses MyInterface {}"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 367,
        "Question": "How do you delete a cookie in Express?",
        "Options": {
            "A": "Using the res.clearCookie() method",
            "B": "Using the res.removeCookie() method",
            "C": "Setting the Expires attribute to a past date",
            "D": "All of the above"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 368,
        "Question": "What is the purpose of the extends keyword when used with interfaces in TypeScript?",
        "Options": {
            "A": "To allow an interface to inherit properties from another interface",
            "B": "To allow an interface to be implemented by multiple classes",
            "C": "To define default values for interface properties",
            "D": "To create an instance of an interface"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 369,
        "Question": "How can you specify that a function parameter in TypeScript is a function itself?",
        "Options": {
            "A": "By using the Function type",
            "B": "By using the function keyword",
            "C": "By using an arrow function syntax",
            "D": "By using the func keyword"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 370,
        "Question": "Can an interface in TypeScript extend a class?",
        "Options": {
            "A": "Yes, and it inherits the class's implementation",
            "B": "Yes, but it only inherits the class's public and protected members",
            "C": "No, interfaces can only extend other interfaces",
            "D": "No, interfaces cannot extend classes"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 371,
        "Question": "How can you define an indexable type in a TypeScript interface?",
        "Options": {
            "A": "interface MyInterface { [key: string]: any; }",
            "B": "interface MyInterface { index: string; }",
            "C": "interface MyInterface { key: any; }",
            "D": "interface MyInterface { index[key: string]: any; }"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 372,
        "Question": "What is the primary concern with using child_process.exec() without proper input validation?",
        "Options": {
            "A": "Performance issues",
            "B": "Syntax errors",
            "C": "Security vulnerabilities (e.g., command injection)",
            "D": "Memory leaks"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 373,
        "Question": "Can a TypeScript interface extend multiple interfaces?",
        "Options": {
            "A": "No, an interface can only extend one interface",
            "B": "Yes, using the extends keyword",
            "C": "Yes, using the implements keyword",
            "D": "Yes, by listing the interfaces separated by commas"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 374,
        "Question": "What is the purpose of the readonly modifier in a TypeScript interface?",
        "Options": {
            "A": "It makes a property accessible only within the interface",
            "B": "It makes a property read-only and unchangeable after initialization",
            "C": "It prevents a property from being inherited",
            "D": "It defines a property as optional"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 375,
        "Question": "What is the primary concern with using eval() in Node.js?",
        "Options": {
            "A": "Performance overhead",
            "B": "Syntax errors",
            "C": "Security vulnerabilities",
            "D": "Memory leaks"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 376,
        "Question": "How can you make all properties of a TypeScript interface optional?",
        "Options": {
            "A": "By using the ? symbol after each property",
            "B": "By prefixing the interface name with Partial",
            "C": "By using the optional keyword before each property",
            "D": "By using the ? symbol after the interface name"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 377,
        "Question": "What is the use of the implements keyword in TypeScript?",
        "Options": {
            "A": "To indicate that a class inherits properties from another class",
            "B": "To define a new class",
            "C": "To specify that a class follows the structure of an interface",
            "D": "To declare a class as a singleton"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 378,
        "Question": "Which of the following is a correct way to implement multiple interfaces in a TypeScript class?",
        "Options": {
            "A": "class MyClass extends Interface1, Interface2 {}",
            "B": "class MyClass implements Interface1 & Interface2 {}",
            "C": "class MyClass implements Interface1, Interface2 {}",
            "D": "class MyClass uses Interface1, Interface2 {}"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 379,
        "Question": "Can interfaces in TypeScript define default values for properties?",
        "Options": {
            "A": "Yes, using the default keyword",
            "B": "No, interfaces cannot define default values",
            "C": "Yes, using the = operator",
            "D": "Yes, using the value keyword"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 380,
        "Question": "How do you enforce that a function parameter must be an object that matches a specific interface in TypeScript?",
        "Options": {
            "A": "By specifying the interface name as the parameter type",
            "B": "By using the instanceof keyword",
            "C": "By using the as keyword",
            "D": "By defining the function inside the interface"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 381,
        "Question": "Which of the following is true about implementing interfaces in TypeScript?",
        "Options": {
            "A": "A class can implement multiple interfaces",
            "B": "A class cannot implement interfaces",
            "C": "Interfaces can only be implemented by abstract classes",
            "D": "Interfaces must be implemented before they can be used"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 382,
        "Question": "What is the purpose of the index signature in a TypeScript interface?",
        "Options": {
            "A": "To allow an interface to define methods",
            "B": "To enable an interface to represent arrays or objects with dynamic keys",
            "C": "To declare a class that implements an interface",
            "D": "To specify the return type of a function"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 383,
        "Question": "How can you create a new type by combining multiple interfaces in TypeScript?",
        "Options": {
            "A": "Using the interface keyword followed by the & operator",
            "B": "Using the type keyword followed by the | operator",
            "C": "Using the type keyword followed by the & operator",
            "D": "Using the interface keyword followed by the | operator"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 384,
        "Question": "Which of the following is an example of a TypeScript union type?",
        "Options": {
            "A": "let id: number | string;",
            "B": "let id: number, string;",
            "C": "let id: [number, string];",
            "D": "let id: number || string;"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 385,
        "Question": "Which HTTP header can be used to set the Content-Security-Policy?",
        "Options": {
            "A": "Content-Security-Policy",
            "B": "X-Content-Security-Policy",
            "C": "Security-Policy",
            "D": "X-Security-Policy"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 386,
        "Question": "How do you pass data to a template engine in Express?",
        "Options": {
            "A": "Using the render() method with a data object",
            "B": "Using the send() method with a data object",
            "C": "Using the json() method with a data object",
            "D": "Using the sendFile() method with a data object"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 387,
        "Question": "What is the purpose of the never type in TypeScript?",
        "Options": {
            "A": "It is used to represent values that will never occur",
            "B": "It is used for nullable types",
            "C": "It is used for functions that return null",
            "D": "It is used for variables that can be of any type"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 388,
        "Question": "Which of the following correctly describes type inference in TypeScript?",
        "Options": {
            "A": "TypeScript automatically assigns a type based on the assigned value",
            "B": "TypeScript requires explicit type declarations for all variables",
            "C": "TypeScript ignores all type declarations and uses dynamic typing",
            "D": "TypeScript provides no support for type inference"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 389,
        "Question": "What is a discriminated union in TypeScript?",
        "Options": {
            "A": "A union type with a common literal property to distinguish between variants",
            "B": "A special type of union that is not allowed in interfaces",
            "C": "A combination of multiple interfaces into a single type",
            "D": "A type alias that includes only primitive types"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 390,
        "Question": "What will happen if you define two Express routes with the same path and HTTP method?",
        "Options": {
            "A": "The first route will be ignored",
            "B": "The second route will be ignored",
            "C": "Both routes will be executed",
            "D": "The last route defined will be executed"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 391,
        "Question": "Which TypeScript feature allows you to add new properties to an existing type?",
        "Options": {
            "A": "Type assertion",
            "B": "Type augmentation",
            "C": "Type inference",
            "D": "Type casting"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 392,
        "Question": "What is the purpose of the typeof type operator in TypeScript?",
        "Options": {
            "A": "It returns the type of a variable as a string",
            "B": "It creates a new type based on the type of a variable",
            "C": "It checks the type of a variable at runtime",
            "D": "It converts a variable to a specific type"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 393,
        "Question": "What is the difference between a cookie and a session?",
        "Options": {
            "A": "Cookies are stored on the server, sessions on the client",
            "B": "Cookies are stored on the client, sessions on the server",
            "C": "There is no difference",
            "D": "Cookies are more secure than sessions"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 394,
        "Question": "What is the primary concern with using eval() on untrusted input?",
        "Options": {
            "A": "Performance issues",
            "B": "Syntax errors",
            "C": "Security vulnerabilities (e.g., code injection)",
            "D": "Memory leaks"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 395,
        "Question": "What is the difference between let and var in TypeScript?",
        "Options": {
            "A": "let is block-scoped, while var is function-scoped",
            "B": "let is function-scoped, while var is block-scoped",
            "C": "There is no difference",
            "D": "let cannot be reassigned, while var can"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 396,
        "Question": "What is the recommended way to handle sensitive data in Express applications?",
        "Options": {
            "A": "Store it in plain text in environment variables",
            "B": "Use strong encryption and store it in the database",
            "C": "Use environment variables and strong encryption",
            "D": "Store it in session cookies"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 397,
        "Question": "How can you inspect the value of an expression in the Node REPL without logging it to the console?",
        "Options": {
            "A": "Using the inspect() function",
            "B": "Using the util.inspect() function",
            "C": "Using the console.dir() method",
            "D": "There is no direct way to do this"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 398,
        "Question": "Which global object provides access to the REPL environment?",
        "Options": {
            "A": "global",
            "B": "process",
            "C": "repl",
            "D": "console"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 399,
        "Question": "What is the difference between app.get() and app.route() in Express?",
        "Options": {
            "A": "app.get() is for GET requests, app.route() is for all HTTP methods",
            "B": "app.get() defines a route handler, app.route() creates a route object",
            "C": "app.get() is for middleware, app.route() is for route handlers",
            "D": "There is no difference"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 400,
        "Question": "What is the purpose of the req.params object in Express?",
        "Options": {
            "A": "To access query parameters",
            "B": "To access route parameters",
            "C": "To access request body",
            "D": "To access session data"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 401,
        "Question": "In Express, which method is used to define a middleware function for all routes?",
        "Options": {
            "A": "app.middleware()",
            "B": "app.use()",
            "C": "app.all()",
            "D": "app.route()"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 402,
        "Question": "How can you define a route in Express that responds to all HTTP methods?",
        "Options": {
            "A": "app.all('/path', (req, res) => {});",
            "B": "app.get('/path', (req, res) => {});",
            "C": "app.route('/path').all((req, res) => {});",
            "D": "Both A and C"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 403,
        "Question": "In Express, how do you access route parameters in a request?",
        "Options": {
            "A": "req.body.params",
            "B": "req.params",
            "C": "req.query.params",
            "D": "req.route.params"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 404,
        "Question": "Which of the following is a common security best practice in Node.js applications?",
        "Options": {
            "A": "Using eval() for parsing user input",
            "B": "Running your application as root",
            "C": "Validating and sanitizing user input",
            "D": "Disabling encryption for data storage"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 405,
        "Question": "What is the primary purpose of using helmet in a Node.js application?",
        "Options": {
            "A": "To improve performance",
            "B": "To add security headers",
            "C": "To manage user sessions",
            "D": "To handle routing"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 406,
        "Question": "What is one way to protect a Node.js application from SQL injection attacks?",
        "Options": {
            "A": "Using string concatenation for SQL queries",
            "B": "Using prepared statements and parameterized queries",
            "C": "Storing SQL queries in plain text files",
            "D": "Running SQL queries through eval()"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 407,
        "Question": "Which Node.js module can be used to prevent brute-force attacks by limiting repeated requests to public APIs?",
        "Options": {
            "A": "bcrypt",
            "B": "cors",
            "C": "express-rate-limit",
            "D": "passport"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 408,
        "Question": "What is the main purpose of the bcrypt module in Node.js?",
        "Options": {
            "A": "To compress and decompress data",
            "B": "To handle file encryption and decryption",
            "C": "To hash and compare passwords",
            "D": "To manage user authentication tokens"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 409,
        "Question": "What is the risk of using eval() in a Node.js application?",
        "Options": {
            "A": "It can cause memory leaks",
            "B": "It can execute arbitrary code, leading to security vulnerabilities",
            "C": "It slows down the application",
            "D": "It is not supported in newer Node.js versions"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 410,
        "Question": "What is the purpose of the .clear() command in the Node REPL?",
        "Options": {
            "A": "Clears the console output",
            "B": "Clears the current line of input",
            "C": "Clears all variables from memory",
            "D": "Exits the REPL"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 411,
        "Question": "Which of the following is a method to secure Express sessions in a Node.js application?",
        "Options": {
            "A": "Using in-memory session storage",
            "B": "Storing session data in plain text",
            "C": "Setting the secure flag on cookies to ensure they're only sent over HTTPS",
            "D": "Disabling session timeout"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 412,
        "Question": "How do you create a readable stream in Node.js using the fs module?",
        "Options": {
            "A": "fs.createReadStream()",
            "B": "fs.openReadStream()",
            "C": "fs.readFileStream()",
            "D": "fs.streamRead()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 413,
        "Question": "What is the primary function of the jsonwebtoken library in Node.js?",
        "Options": {
            "A": "To manage API rate limits",
            "B": "To generate and verify JSON Web Tokens (JWTs)",
            "C": "To handle file uploads",
            "D": "To encrypt and decrypt data"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 414,
        "Question": "Which Node.js package can be used to detect and fix vulnerabilities in your project's dependencies?",
        "Options": {
            "A": "npm-check",
            "B": "node-inspector",
            "C": "nsp",
            "D": "snyk"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 415,
        "Question": "Which Node.js module provides tools for creating and verifying JSON Web Tokens (JWTs)?",
        "Options": {
            "A": "jsonwebtoken",
            "B": "jwt",
            "C": "token",
            "D": "crypto"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 416,
        "Question": "How do you start the REPL in Node.js?",
        "Options": {
            "A": "By running node start in the terminal",
            "B": "By running node repl in the terminal",
            "C": "By running node shell in the terminal",
            "D": "By simply running node in the terminal"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 417,
        "Question": "Which command in the REPL will exit the session?",
        "Options": {
            "A": "exit",
            "B": "quit",
            "C": ".exit",
            "D": "stop"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 418,
        "Question": "In Node.js REPL, which command is used to save the current session to a file?",
        "Options": {
            "A": ".save filename",
            "B": ".write filename",
            "C": ".export filename",
            "D": ".dump filename"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 419,
        "Question": "What is the purpose of a rate limiter in Express?",
        "Options": {
            "A": "To prevent denial of service attacks",
            "B": "To encrypt user data",
            "C": "To validate user input",
            "D": "To protect against SQL injection"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 420,
        "Question": "How do you clear the console in Node.js REPL?",
        "Options": {
            "A": ".clear",
            "B": ".cls",
            "C": ".reset",
            "D": "Ctrl + L"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 421,
        "Question": "What command in Node.js REPL is used to see the list of available commands?",
        "Options": {
            "A": ".help",
            "B": ".commands",
            "C": ".list",
            "D": ".options"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 422,
        "Question": "In the Node.js REPL, how do you reload the previous command?",
        "Options": {
            "A": "Press the up arrow key",
            "B": "Type .prev",
            "C": "Press Ctrl + P",
            "D": "Type .last"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 423,
        "Question": "How can you view all the previously executed commands in Node.js REPL?",
        "Options": {
            "A": "Using the .history command",
            "B": "By pressing Ctrl + H",
            "C": "By typing history",
            "D": "There is no way to view them"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 424,
        "Question": "What does the _ variable represent in the Node.js REPL?",
        "Options": {
            "A": "The previous command entered",
            "B": "The last evaluated expression",
            "C": "The current session ID",
            "D": "The first expression evaluated"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 425,
        "Question": "In Node.js applications, what method is used to send a JSON response back from a server?",
        "Options": {
            "A": "res.pushJSON()",
            "B": "res.sendJSON()",
            "C": "res.returnJSON()",
            "D": "res.json()"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 426,
        "Question": "What is the HTTP Status Code Related to Page Not Found?",
        "Options": {
            "A": "402",
            "B": "403",
            "C": "404",
            "D": "401"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 427,
        "Question": "In which format does MongoDB store its data?",
        "Options": {
            "A": "XML",
            "B": "JSON",
            "C": "CSV",
            "D": "BSON"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 428,
        "Question": "How do you capture query parameters in Express routes?",
        "Options": {
            "A": "req.data",
            "B": "req.params",
            "C": "req.query",
            "D": "req.body"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 429,
        "Question": "Which decorator is used to define an Angular component?",
        "Options": {
            "A": "@Service",
            "B": "@Directive",
            "C": "@Module",
            "D": "@Component"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 430,
        "Question": "What is the default type for variables in TypeScript if not explicitly defined?",
        "Options": {
            "A": "unknown",
            "B": "string",
            "C": "void",
            "D": "any"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 431,
        "Question": "Which file defines the version and dependencies of an npm package?",
        "Options": {
            "A": "node_modules.json",
            "B": "package-lock.json",
            "C": "package.json",
            "D": "dependencies.json"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 432,
        "Question": "How do you set up a connection to a MySQL database using Node.js?",
        "Options": {
            "A": "Using the pg package",
            "B": "Using the mongodb package",
            "C": "Using the mysql or mysql2 package",
            "D": "Using the redis package"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 433,
        "Question": "In Angular, ng serves used to",
        "Options": {
            "A": "Run unit tests",
            "B": "Create a new Angular service",
            "C": "Deploy the application to a remote server",
            "D": "Compile the application and serves it locally"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 434,
        "Question": "To serve static files like images, CSS and JavaScript files in Express, we use:",
        "Options": {
            "A": "res.sendFile()",
            "B": "express.static()",
            "C": "app.static()",
            "D": "res.sendStatic()"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 435,
        "Question": "What is the advantage of TypeScript over JavaScript?",
        "Options": {
            "A": "No need for a build step",
            "B": "Faster execution speed",
            "C": "Simplified syntax",
            "D": "Static typing and compile-time checking"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 436,
        "Question": "In Angular, how do we bind a property to an element?",
        "Options": {
            "A": "Using square brackets, e.g., [property]=\"value\"",
            "B": "Using parentheses, e.g., (property)=\"value\"",
            "C": "Using curly braces, e.g., {property}",
            "D": "Using quotes, e.g., \"property\"=\"value\""
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 437,
        "Question": "Which command is used to list all installed npm packages?",
        "Options": {
            "A": "npm new",
            "B": "npm show",
            "C": "npm list",
            "D": "npm info"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 438,
        "Question": "Which component of the MEAN stack is responsible for handling server-side logic?",
        "Options": {
            "A": "MongoDB",
            "B": "Angular",
            "C": "Express",
            "D": "Node.js"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 439,
        "Question": "How do we do attribute binding in Angular?",
        "Options": {
            "A": "(attr.class)=\"className\"",
            "B": "{attr.class}=\"className\"",
            "C": "{{attr.class}}=\"className\"",
            "D": "[attr.class]=\"className\""
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 440,
        "Question": "Which npm command is used to initialize a new package.json file?",
        "Options": {
            "A": "npm st",
            "B": "npm init",
            "C": "npm setup",
            "D": "npm run"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 441,
        "Question": "What keyword is used to define a class in TypeScript?",
        "Options": {
            "A": "new",
            "B": "define",
            "C": "type",
            "D": "class"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 442,
        "Question": "How does Angular interact with other components in the MEAN stack?",
        "Options": {
            "A": "Through direct database queries",
            "B": "Through the server-side Express API",
            "C": "Through server-side scripts",
            "D": "Through client-side routing"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 443,
        "Question": "The primary advantage of using Node.js in the MEAN stack is",
        "Options": {
            "A": "It offers strong typing",
            "B": "It supports synchronous I/O operations",
            "C": "It enables high performance and scalability",
            "D": "It restricts use to a single language"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 444,
        "Question": "Which keyword is used to import a module in Node.js?",
        "Options": {
            "A": "include",
            "B": "gett",
            "C": "require",
            "D": "fetch"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 445,
        "Question": "The file format is used for Node modules is",
        "Options": {
            "A": ".json",
            "B": ".module",
            "C": ".node",
            "D": ".js"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 446,
        "Question": "How to load a built-in module in Node.js?",
        "Options": {
            "A": "Using the require() function with the module name",
            "B": "Including the module file in your code",
            "C": "Referencing the module in the HTML file",
            "D": "Importing the module from an external source"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 447,
        "Question": "How to export a function from a Node.js module?",
        "Options": {
            "A": "module.functionName = functionName",
            "B": "exports.functionName = functionName",
            "C": "export functionName",
            "D": "module.exports = functionName"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 448,
        "Question": "In Node.js, the fs module stands for",
        "Options": {
            "A": "File Server",
            "B": "File System",
            "C": "File Storage",
            "D": "File Sync"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 449,
        "Question": "What is the primary method to handle cross-site scripting (XSS) in Node.js applications?",
        "Options": {
            "A": "Using API keys",
            "B": "Using secure cookies",
            "C": "Implementing HTTPS",
            "D": "Sanitizing user input"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 450,
        "Question": "How do you start a server in Node.js using the http module?",
        "Options": {
            "A": "server.begin()",
            "B": "server.open()",
            "C": "server.listen()",
            "D": "server.start()"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 451,
        "Question": "Which of the following is the file extension for TypeScript files?",
        "Options": {
            "A": ".js",
            "B": ".tsx",
            "C": ".ts",
            "D": ".tsp"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 452,
        "Question": "What is the output of the following TypeScript code? let x: number = 52; console.log(typeof x);",
        "Options": {
            "A": "number",
            "B": "string",
            "C": "object",
            "D": "undefined"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 453,
        "Question": "What is the default access modifier for properties and methods in a TypeScript class?",
        "Options": {
            "A": "new",
            "B": "private",
            "C": "public",
            "D": "default"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 454,
        "Question": "How can you define an optional parameter in a TypeScript function?",
        "Options": {
            "A": "By adding a question mark ? after the parameter name",
            "B": "By using the optional keyword",
            "C": "By using the ? symbol before the parameter name",
            "D": "By using the nullable keyword"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 455,
        "Question": "How do you write data to a file using the fs module in Node.js?",
        "Options": {
            "A": "fs.writeFile()",
            "B": "fs.createFile()",
            "C": "fs.addFile()",
            "D": "fs.setFile()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 456,
        "Question": "Which of the following is the correct way to define an array of numbers in TypeScript?",
        "Options": {
            "A": "let numbers: number[] = [11, 12, 43];",
            "B": "let numbers: array = [11, 12, 43];",
            "C": "let numbers: [number] = [11, 12, 43];",
            "D": "let numbers: Array = [11, 12, 43];"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 457,
        "Question": "What will be the output of the following TypeScript code? let num: number = 130; let result: string = num as unknown as string; console.log(typeof result);",
        "Options": {
            "A": "number",
            "B": "string",
            "C": "object",
            "D": "unknown"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 458,
        "Question": "How do you declare a variable that can hold either a string or a number in TypeScript?",
        "Options": {
            "A": "let var: string | number;",
            "B": "let var: string || number;",
            "C": "let var: string or number;",
            "D": "let var: [string, number];"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 459,
        "Question": "What does REPL stand for in Node.js?",
        "Options": {
            "A": "Read Evaluate Process Loop",
            "B": "Read Execute Print Loop",
            "C": "Read Evaluate Print Loop",
            "D": "Read Edit Print Loop"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 460,
        "Question": "What does the fs.unlink() method do in Node.js?",
        "Options": {
            "A": "Creates a new file",
            "B": "Deletes a file",
            "C": "Renames a file",
            "D": "Copies a file"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 461,
        "Question": "Which of the following operators is used for exponentiation in TypeScript?",
        "Options": {
            "A": "^",
            "B": "**",
            "C": "exp",
            "D": "pow"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 462,
        "Question": "How can you protect a Node.js application from Cross-Site Request Forgery (CSRF) attacks?",
        "Options": {
            "A": "By using strong encryption for passwords",
            "B": "By implementing CSRF tokens",
            "C": "By disabling cookies",
            "D": "By using a firewall"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 463,
        "Question": "Which of the following shortcuts executes the last command in the REPL?",
        "Options": {
            "A": "Ctrl + L",
            "B": "Ctrl + R",
            "C": "Ctrl + P",
            "D": "Ctrl + Y"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 464,
        "Question": "What is the purpose of the express.Router() object?",
        "Options": {
            "A": "To define middleware functions",
            "B": "To create modular route handlers",
            "C": "To manage HTTP requests",
            "D": "To handle errors"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 465,
        "Question": "Which HTTP method is used to create a new resource?",
        "Options": {
            "A": "GET",
            "B": "POST",
            "C": "PUT",
            "D": "DELETE"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 466,
        "Question": "What will be the output of the following TypeScript code? let a = 14; let b = 25; console.log(a > b ? \"a is greater\" : \"b is greater\");",
        "Options": {
            "A": "a is greater",
            "B": "b is greater",
            "C": "undefined",
            "D": "null"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 467,
        "Question": "Which HTTP header is often used to prevent Cross-Site Request Forgery (CSRF) attacks?",
        "Options": {
            "A": "X-Requested-With",
            "B": "X-CSRF-Token",
            "C": "Content-Security-Policy",
            "D": "Referer"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 468,
        "Question": "Which template engine is often used with Express?",
        "Options": {
            "A": "EJS",
            "B": "Handlebars",
            "C": "Pug",
            "D": "All of these"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 469,
        "Question": "Which HTTP header is used to set a cookie?",
        "Options": {
            "A": "Content-Type",
            "B": "Cookie",
            "C": "X-Cookie",
            "D": "Set-Cookie"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 470,
        "Question": "What is the purpose of a cryptographic hash function?",
        "Options": {
            "A": "To encrypt data",
            "B": "To generate a unique digital fingerprint of data",
            "C": "To decrypt data",
            "D": "To create random numbers"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 471,
        "Question": "How do you define a route parameter in Express?",
        "Options": {
            "A": "Using the :param syntax in the route path",
            "B": "Using the params object in the request",
            "C": "Using the query object in the request",
            "D": "Using middleware"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 472,
        "Question": "Which Node.js module provides tools for creating and verifying digital certificates?",
        "Options": {
            "A": "crypto",
            "B": "tls",
            "C": "https",
            "D": "cert"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 473,
        "Question": "What is the purpose of the next() function in Express middleware?",
        "Options": {
            "A": "To pass control to the next middleware function",
            "B": "To end the request-response cycle",
            "C": "To redirect the user",
            "D": "To render a view"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 474,
        "Question": "Which of the following is used to transform data in Angular templates?",
        "Options": {
            "A": "Guards",
            "B": "Filters",
            "C": "Services",
            "D": "Pipes"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 475,
        "Question": "Which module can be used for creating and verifying digital signatures?",
        "Options": {
            "A": "path",
            "B": "tls",
            "C": "https",
            "D": "crypto"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 476,
        "Question": "How to access session data in an Express request handler?",
        "Options": {
            "A": "Using the req.session object",
            "B": "Using the req.cookies object",
            "C": "Using the res.session object",
            "D": "Using the res.cookies object"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 477,
        "Question": "What is the purpose of a rate limiter middleware in Express?",
        "Options": {
            "A": "To prevent brute force attacks",
            "B": "To protect against SQL injection",
            "C": "To validate user input",
            "D": "To encrypt user data"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 478,
        "Question": "Which HTTP header can be used to indicate that a web application is secure?",
        "Options": {
            "A": "X-Secure",
            "B": "Strict-Transport-Security",
            "C": "Secure-Connection",
            "D": "X-Security"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 479,
        "Question": "What is the purpose of template engines in Express?",
        "Options": {
            "A": "To render dynamic HTML content",
            "B": "To manage database connections",
            "C": "To handle routing",
            "D": "To create middleware functions"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 480,
        "Question": "How do you define a dynamic route in Express?",
        "Options": {
            "A": "app.get('/user?', (req, res) => {});",
            "B": "app.get('/user', (req, res) => {});",
            "C": "app.get('/user/*', (req, res) => {});",
            "D": "app.get('/user/:id', (req, res) => {});"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 481,
        "Question": "In Express, what is the function of a router?",
        "Options": {
            "A": "To manage file uploads",
            "B": "To handle database connections",
            "C": "To define and organize endpoints for the application",
            "D": "To provide middleware for authentication"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 482,
        "Question": "What is the purpose of the declare keyword in TypeScript?",
        "Options": {
            "A": "To create a new variable",
            "B": "To define an external variable or function in a global scope",
            "C": "To initialize a variable with a default value",
            "D": "To cast a variable to a specific type"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 483,
        "Question": "Which of the following is a correct way to define a function with a return type in TypeScript?",
        "Options": {
            "A": "function add(a: number, b: number): number { return a + b; }",
            "B": "function add(a, b): number { return a + b; }",
            "C": "function add(a: number, b: number) { return a + b; }",
            "D": "function add(a: number, b: number): { return a + b; }"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 484,
        "Question": "How does Express facilitate development in the MEAN stack?",
        "Options": {
            "A": "By providing a simple routing mechanism and middleware support",
            "B": "By offering database management tools",
            "C": "By enabling client-side data binding",
            "D": "By implementing a model-view-controller architecture"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 485,
        "Question": "Which Angular feature facilitates unit testing?",
        "Options": {
            "A": "Services",
            "B": "Modules",
            "C": "Directives",
            "D": "Dependency Injection"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 486,
        "Question": "Which of the following is a benefit of using Angular's CLI?",
        "Options": {
            "A": "It reduces the need for manual coding",
            "B": "It provides built-in testing capabilities",
            "C": "It enhances code readability",
            "D": "It simplifies the build process"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 487,
        "Question": "In Express, how can you handle 404 errors for all undefined routes?",
        "Options": {
            "A": "By using app.use((req, res) => { res.status(404).send('Not found'); });",
            "B": "By defining a route app.get('*', (req, res) => { res.status(404).send('Not found'); });",
            "C": "By using app.all((req, res) => { res.status(404).send('Not found'); });",
            "D": "All of the above"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 488,
        "Question": "How does Angular enhance the performance of web applications?",
        "Options": {
            "A": "By rendering the entire page on every update",
            "B": "By using two-way data binding",
            "C": "By implementing lazy loading and ahead-of-time compilation",
            "D": "By minimizing code reusability"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 489,
        "Question": "In Angular, which of the following is used to bind a method to a button click event?",
        "Options": {
            "A": "(click)=\"method()\"",
            "B": "[click]=\"method()\"",
            "C": "{{click}}=\"method()\"",
            "D": "{click}=\"method()\""
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 490,
        "Question": "What is the primary benefit of two-way data binding?",
        "Options": {
            "A": "It makes data flow unidirectional",
            "B": "It eliminates the need for a model",
            "C": "It allows automatic synchronization of data",
            "D": "It enhances the security of data"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 491,
        "Question": "In MongoDB, which operator is used for equality checks in queries?",
        "Options": {
            "A": "$eq",
            "B": "$equals",
            "C": "$is",
            "D": "$match"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 492,
        "Question": "Which HTTP method is used to update a resource in Express?",
        "Options": {
            "A": "GET",
            "B": "POST",
            "C": "PUT",
            "D": "DELETE"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 493,
        "Question": "Which file contains the root component in an Angular application?",
        "Options": {
            "A": "main.ts",
            "B": "app.component.ts",
            "C": "index.html",
            "D": "app.module.ts"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 494,
        "Question": "How to pass data from parent component to child component in Angular?",
        "Options": {
            "A": "Using services",
            "B": "Using serve",
            "C": "Using @Input properties",
            "D": "Using @Output properties"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 495,
        "Question": "In Node.js, how do you handle exceptions thrown in asynchronous code?",
        "Options": {
            "A": "try-catch blocks",
            "B": "Promises or callbacks",
            "C": "event listeners",
            "D": "process.on('exception')"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 496,
        "Question": "Which lifecycle hook is called after the first ngOnChanges in Angular?",
        "Options": {
            "A": "ngAfterContentInit",
            "B": "ngAfterViewInit",
            "C": "ngDoCheck",
            "D": "ngOnInit"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 497,
        "Question": "Which Angular feature allows you to hide or display elements based on conditions?",
        "Options": {
            "A": "Data binding",
            "B": "Directives",
            "C": "Pipes",
            "D": "Services"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 498,
        "Question": "In Node.js, which module is used to work with paths?",
        "Options": {
            "A": "field",
            "B": "os",
            "C": "url",
            "D": "path"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 499,
        "Question": "Which Angular directive is used for rendering lists?",
        "Options": {
            "A": "*ngList",
            "B": "*ngLoop",
            "C": "*ngFor",
            "D": "*ngRender"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 500,
        "Question": "In Express, what is the purpose of the next function in a middleware?",
        "Options": {
            "A": "To move to the next route handler",
            "B": "To terminate the request-response cycle",
            "C": "To skip the current middleware",
            "D": "To invoke the next middleware function"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 501,
        "Question": "What is a binding target in Angular?",
        "Options": {
            "A": "The source of the data",
            "B": "The element that receives the data",
            "C": "The property of the element to be bound",
            "D": "The function that binds the data"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 502,
        "Question": "Which method is used to define a route in Express.js?",
        "Options": {
            "A": "app.listen()",
            "B": "app.route()",
            "C": "app.use()",
            "D": "app.get()"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 503,
        "Question": "What is npm in Node.js?",
        "Options": {
            "A": "A package manager for Node.js",
            "B": "A web server",
            "C": "A database",
            "D": "A template engine"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 504,
        "Question": "What does the ngModel directive do in Angular?",
        "Options": {
            "A": "Defines routing rules",
            "B": "Manages component state",
            "C": "Handles HTTP responses",
            "D": "Binds data to a form element"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 505,
        "Question": "What is an example of a built-in Angular pipe?",
        "Options": {
            "A": "NgFor",
            "B": "NgModel",
            "C": "NgIf",
            "D": "DatePipe"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 506,
        "Question": "Which feature of MongoDB allows for flexible schema design?",
        "Options": {
            "A": "Key-value pairs",
            "B": "Document-based data model",
            "C": "SQL-based schema",
            "D": "Relational tables"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 507,
        "Question": "How does Node.js handle concurrency?",
        "Options": {
            "A": "By using a single-threaded approach",
            "B": "By using synchronous I/O operations",
            "C": "By using an event-driven, non-blocking I/O model",
            "D": "By using multi-threading"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 508,
        "Question": "Why is MongoDB a preferred choice for the MEAN stack?",
        "Options": {
            "A": "It is a lightweight framework",
            "B": "It uses SQL for querying",
            "C": "It is schema-less and flexible",
            "D": "It is primarily a front-end library"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 509,
        "Question": "Which symbol is used to separate key-value pairs in JSON?",
        "Options": {
            "A": ",",
            "B": "=",
            "C": ";",
            "D": ":"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 510,
        "Question": "In Express, if you wanted a middleware function to be executed for every request, where would you place it?",
        "Options": {
            "A": "Inside the app's main file",
            "B": "At the end of all route definitions",
            "C": "Inside each route definition",
            "D": "Before all route definitions"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 511,
        "Question": "What method is used to create a middleware in Express?",
        "Options": {
            "A": "app.use()",
            "B": "app.middleware()",
            "C": "express.use()",
            "D": "express.middleware()"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 512,
        "Question": "Which of these is not a core feature of Express?",
        "Options": {
            "A": "Middleware",
            "B": "Routing",
            "C": "Templating",
            "D": "ORM"
        },
        "Answer": "D"
    },
    {
        "QuestionNumber": 513,
        "Question": "Which of the following ensures atomic transactions in MongoDB?",
        "Options": {
            "A": "WriteConcern",
            "B": "Sharding",
            "C": "Indexing",
            "D": "Replication"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 514,
        "Question": "Which HTTP methods are commonly used in REST API operations?",
        "Options": {
            "A": "SEND, RECEIVE, MODIFY, DELETE",
            "B": "CREATE, READ, UPDATE, DELETE",
            "C": "GET, POST, PUT, DELETE",
            "D": "INSERT, SELECT, UPDATE, DELETE"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 515,
        "Question": "What would be the primary use case for the cluster module in Node.js?",
        "Options": {
            "A": "Data validation",
            "B": "Improved logging",
            "C": "Load balancing over multiple CPU cores",
            "D": "Data encryption"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 516,
        "Question": "What is the primary concern with storing sensitive data in session cookies?",
        "Options": {
            "A": "Performance issues",
            "B": "Security vulnerabilities",
            "C": "Compatibility issues",
            "D": "Cookie size limits"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 517,
        "Question": "Which keyword is used to export a class in Angular?",
        "Options": {
            "A": "import",
            "B": "class",
            "C": "export",
            "D": "module"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 518,
        "Question": "Which of the following is true about interfaces in TypeScript?",
        "Options": {
            "A": "Interfaces can define private members",
            "B": "Interfaces can define method implementations",
            "C": "Interfaces can extend multiple interfaces",
            "D": "Interfaces cannot have optional properties"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 519,
        "Question": "What happens if a class does not implement all the methods of an interface in TypeScript?",
        "Options": {
            "A": "The class will fail to compile",
            "B": "The missing methods will be ignored",
            "C": "The class will implement default methods",
            "D": "The class will throw a runtime error"
        },
        "Answer": "A"
    },
    {
        "QuestionNumber": 520,
        "Question": "Which of the following can be used to define a function type in a TypeScript interface?",
        "Options": {
            "A": "function myFunc(): void;",
            "B": "myFunc(): void;",
            "C": "myFunc: () => void;",
            "D": "myFunc: function;"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 521,
        "Question": "Which TypeScript feature helps you write asynchronous code in a more readable way?",
        "Options": {
            "A": "Promises",
            "B": "Generators",
            "C": "Async/await",
            "D": "Callbacks"
        },
        "Answer": "C"
    },
    {
        "QuestionNumber": 522,
        "Question": "What does the event Emitter.emit method in Node.js do?",
        "Options": {
            "A": "It sets up a new event.",
            "B": "It triggers an event.",
            "C": "It listens for an event.",
            "D": "It terminates an ongoing event."
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 523,
        "Question": "What is the Node.js event loop?",
        "Options": {
            "A": "A loop that emits custom events",
            "B": "A loop that continuously checks for events and processes them",
            "C": "A mechanism to define custom events",
            "D": "The main process of a Node.js application"
        },
        "Answer": "B"
    },
    {
        "QuestionNumber": 524,
        "Question": "How do you define a route in Express that handles a GET request to the path /users?",
        "Options": {
            "A": "app.put('/users', (req, res) => {});",
            "B": "app.get('/users', (req, res) => {});",
            "C": "app.route('/users').get((req, res) => {});",
            "D": "app.post('/users', (req, res) => {});"
        },
        "Answer": "B"
    }
]